var Renderer=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=32)}([function(e,t,r){
/*!
 * @license twgl.js 4.11.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
 * Available via the MIT license.
 * see: http://github.com/greggman/twgl.js for details
 */
var n;"undefined"!=typeof self&&self,n=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./src/twgl-full.js")}({"./src/attributes.js":
/*!***************************!*\
  !*** ./src/attributes.js ***!
  \***************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.createAttribsFromArrays=v,t.createBuffersFromArrays=function(e,t){var r={};return Object.keys(t).forEach(function(n){r[n]=b(e,t[n],n)}),t.indices?(r.numElements=t.indices.length,r.elementType=n.getGLTypeForTypedArray(h(t.indices),"indices")):r.numElements=function(e){var t,r;for(r=0;r<y.length&&!((t=y[r])in e);++r);r===y.length&&(t=Object.keys(e)[0]);var n=e[t],o=f(n).length,i=m(n,t),a=o/i;if(o%i>0)throw new Error("numComponents ".concat(i," not correct for length ").concat(o));return a}(t),r},t.createBufferFromArray=b,t.createBufferFromTypedArray=s,t.createBufferInfoFromArrays=function(e,t,r){var o=v(e,t),i=Object.assign({},r||{});i.attribs=Object.assign({},r?r.attribs:{},o);var u=t.indices;if(u){var c=h(u,"indices");i.indices=s(e,c,e.ELEMENT_ARRAY_BUFFER),i.numElements=c.length,i.elementType=n.getGLTypeForTypedArray(c)}else i.numElements||(i.numElements=function(e,t){var r,n;for(n=0;n<y.length&&!((r=y[n])in t)&&!((r=a.attribPrefix+r)in t);++n);n===y.length&&(r=Object.keys(t)[0]);var o=t[r];e.bindBuffer(e.ARRAY_BUFFER,o.buffer);var i=e.getBufferParameter(e.ARRAY_BUFFER,e.BUFFER_SIZE);e.bindBuffer(e.ARRAY_BUFFER,null);var u=function(e,t){return t===e.BYTE?1:t===e.UNSIGNED_BYTE?1:t===e.SHORT?2:t===e.UNSIGNED_SHORT?2:t===e.INT?4:t===e.UNSIGNED_INT?4:t===e.FLOAT?4:0}(e,o.type),s=i/u,c=o.numComponents||o.size,f=s/c;if(f%1!=0)throw new Error("numComponents ".concat(c," not correct for length ").concat(length));return f}(e,i.attribs));return i},t.setAttribInfoBufferFromArray=function(e,t,r,n){r=h(r),void 0!==n?(e.bindBuffer(e.ARRAY_BUFFER,t.buffer),e.bufferSubData(e.ARRAY_BUFFER,n,r)):u(e,e.ARRAY_BUFFER,t.buffer,r,t.drawType)},t.setAttributePrefix=function(e){a.attribPrefix=e},t.setAttributeDefaults_=function(e){o.copyExistingProperties(e,a)},t.getNumComponents_=m,t.getArray_=f;var n=i(r(/*! ./typedarrays.js */"./src/typedarrays.js")),o=i(r(/*! ./helper.js */"./src/helper.js"));function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}var a={attribPrefix:""};function u(e,t,r,n,o){e.bindBuffer(t,r),e.bufferData(t,n,o||e.STATIC_DRAW)}function s(e,t,r,n){if(o.isBuffer(e,t))return t;r=r||e.ARRAY_BUFFER;var i=e.createBuffer();return u(e,r,i,t,n),i}function c(e){return"indices"===e}function f(e){return e.length?e:e.data}var l=/coord|texture/i,p=/color|colour/i;function d(e,t){var r;if(t%(r=l.test(e)?2:p.test(e)?4:3)>0)throw new Error("Can not guess numComponents for attribute '".concat(e,"'. Tried ").concat(r," but ").concat(t," values is not evenly divisible by ").concat(r,". You should specify it."));return r}function m(e,t){return e.numComponents||e.size||d(t,f(e).length)}function h(e,t){if(n.isArrayBuffer(e))return e;if(n.isArrayBuffer(e.data))return e.data;Array.isArray(e)&&(e={data:e});var r=e.type;return r||(r=c(t)?Uint16Array:Float32Array),new r(e.data)}function v(e,t){var r={};return Object.keys(t).forEach(function(o){if(!c(o)){var i=t[o],u=i.attrib||i.name||i.attribName||a.attribPrefix+o;if(i.value){if(!Array.isArray(i.value)&&!n.isArrayBuffer(i.value))throw new Error("array.value is not array or typedarray");r[u]={value:i.value}}else{var f,l,p,v;if(i.buffer&&i.buffer instanceof WebGLBuffer)f=i.buffer,v=i.numComponents||i.size,l=i.type,p=i.normalize;else if("number"==typeof i||"number"==typeof i.data){var y=i.data||i,b=i.type||Float32Array,E=y*b.BYTES_PER_ELEMENT;l=n.getGLTypeForTypedArrayType(b),p=void 0!==i.normalize?i.normalize:(x=b)===Int8Array||x===Uint8Array,v=i.numComponents||i.size||d(o,y),f=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,f),e.bufferData(e.ARRAY_BUFFER,E,i.drawType||e.STATIC_DRAW)}else{var g=h(i,o);f=s(e,g,void 0,i.drawType),l=n.getGLTypeForTypedArray(g),p=void 0!==i.normalize?i.normalize:function(e){return e instanceof Int8Array||e instanceof Uint8Array}(g),v=m(i,o)}r[u]={buffer:f,numComponents:v,type:l,normalize:p,stride:i.stride||0,offset:i.offset||0,divisor:void 0===i.divisor?void 0:i.divisor,drawType:i.drawType}}}var x}),e.bindBuffer(e.ARRAY_BUFFER,null),r}var y=["position","positions","a_position"];function b(e,t,r){var n="indices"===r?e.ELEMENT_ARRAY_BUFFER:e.ARRAY_BUFFER;return s(e,h(t,r),n)}},"./src/draw.js":
/*!*********************!*\
  !*** ./src/draw.js ***!
  \*********************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.drawBufferInfo=o,t.drawObjectList=function(e,t){var r=null,i=null;t.forEach(function(t){if(!1!==t.active){var a=t.programInfo,u=t.vertexArrayInfo||t.bufferInfo,s=!1,c=void 0===t.type?e.TRIANGLES:t.type;a!==r&&(r=a,e.useProgram(a.program),s=!0),(s||u!==i)&&(i&&i.vertexArrayObject&&!u.vertexArrayObject&&e.bindVertexArray(null),i=u,n.setBuffersAndAttributes(e,a,u)),n.setUniforms(a,t.uniforms),o(e,u,c,t.count,t.offset,t.instanceCount)}}),i.vertexArrayObject&&e.bindVertexArray(null)};var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(/*! ./programs.js */"./src/programs.js"));function o(e,t,r,n,o,i){r=void 0===r?e.TRIANGLES:r;var a=t.indices,u=t.elementType,s=void 0===n?t.numElements:n;o=void 0===o?0:o,u||a?void 0!==i?e.drawElementsInstanced(r,s,void 0===u?e.UNSIGNED_SHORT:t.elementType,o,i):e.drawElements(r,s,void 0===u?e.UNSIGNED_SHORT:t.elementType,o):void 0!==i?e.drawArraysInstanced(r,o,s,i):e.drawArrays(r,o,s)}},"./src/framebuffers.js":
/*!*****************************!*\
  !*** ./src/framebuffers.js ***!
  \*****************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.bindFramebufferInfo=function(e,t,r){r=r||e.FRAMEBUFFER,t?(e.bindFramebuffer(r,t.framebuffer),e.viewport(0,0,t.width,t.height)):(e.bindFramebuffer(r,null),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight))},t.createFramebufferInfo=function(e,t,r,i){var f=e.FRAMEBUFFER,l=e.createFramebuffer();e.bindFramebuffer(f,l),r=r||e.drawingBufferWidth,i=i||e.drawingBufferHeight;var p=0,d={framebuffer:l,attachments:[],width:r,height:i};return(t=t||u).forEach(function(t){var u=t.attachment,l=t.format,m=function(e){return s[e]}(l);if(m||(m=a+p++),!u)if(function(e){return c[e]}(l))u=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,u),e.renderbufferStorage(e.RENDERBUFFER,l,r,i);else{var h=Object.assign({},t);h.width=r,h.height=i,void 0===h.auto&&(h.auto=!1,h.min=h.min||h.minMag||e.LINEAR,h.mag=h.mag||h.minMag||e.LINEAR,h.wrapS=h.wrapS||h.wrap||e.CLAMP_TO_EDGE,h.wrapT=h.wrapT||h.wrap||e.CLAMP_TO_EDGE),u=n.createTexture(e,h)}if(o.isRenderbuffer(e,u))e.framebufferRenderbuffer(f,m,e.RENDERBUFFER,u);else{if(!o.isTexture(e,u))throw new Error("unknown attachment type");void 0!==t.layer?e.framebufferTextureLayer(f,m,u,t.level||0,t.layer):e.framebufferTexture2D(f,m,t.texTarget||e.TEXTURE_2D,u,t.level||0)}d.attachments.push(u)}),d},t.resizeFramebufferInfo=function(e,t,r,i,a){i=i||e.drawingBufferWidth,a=a||e.drawingBufferHeight,t.width=i,t.height=a,(r=r||u).forEach(function(r,u){var s=t.attachments[u],c=r.format;if(o.isRenderbuffer(e,s))e.bindRenderbuffer(e.RENDERBUFFER,s),e.renderbufferStorage(e.RENDERBUFFER,c,i,a);else{if(!o.isTexture(e,s))throw new Error("unknown attachment type");n.resizeTexture(e,s,r,i,a)}})};var n=i(r(/*! ./textures.js */"./src/textures.js")),o=i(r(/*! ./helper.js */"./src/helper.js"));function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}var a=36064,u=[{format:6408,type:5121,min:9729,wrap:33071},{format:34041}],s={34041:33306,6401:36128,36168:36128,6402:36096,33189:36096},c={32854:!0,32855:!0,36194:!0,34041:!0,33189:!0,6401:!0,36168:!0}},"./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.copyExistingProperties=function(e,t){Object.keys(t).forEach(function(r){t.hasOwnProperty(r)&&e.hasOwnProperty(r)&&(t[r]=e[r])})},t.copyNamedProperties=function(e,t,r){e.forEach(function(e){var n=t[e];void 0!==n&&(r[e]=n)})},t.isBuffer=function(e,t){return"undefined"!=typeof WebGLBuffer&&t instanceof WebGLBuffer},t.isRenderbuffer=function(e,t){return"undefined"!=typeof WebGLRenderbuffer&&t instanceof WebGLRenderbuffer},t.isShader=function(e,t){return"undefined"!=typeof WebGLShader&&t instanceof WebGLShader},t.isTexture=function(e,t){return"undefined"!=typeof WebGLTexture&&t instanceof WebGLTexture},t.isSampler=function(e,t){return"undefined"!=typeof WebGLSampler&&t instanceof WebGLSampler},t.warn=t.error=void 0;var n="undefined"!=typeof console&&console.error&&"function"==typeof console.error?console.error.bind(console):function(){};t.error=n;var o="undefined"!=typeof console&&console.warn&&"function"==typeof console.warn?console.warn.bind(console):function(){};t.warn=o},"./src/m4.js":
/*!*******************!*\
  !*** ./src/m4.js ***!
  \*******************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.axisRotate=function(e,t,r,n){n=n||new o(16);var i=t[0],a=t[1],u=t[2],s=Math.sqrt(i*i+a*a+u*u),c=(i/=s)*i,f=(a/=s)*a,l=(u/=s)*u,p=Math.cos(r),d=Math.sin(r),m=1-p,h=c+(1-c)*p,v=i*a*m+u*d,y=i*u*m-a*d,b=i*a*m-u*d,E=f+(1-f)*p,g=a*u*m+i*d,x=i*u*m+a*d,_=a*u*m-i*d,T=l+(1-l)*p,A=e[0],R=e[1],w=e[2],P=e[3],F=e[4],O=e[5],L=e[6],C=e[7],S=e[8],B=e[9],I=e[10],U=e[11];return n[0]=h*A+v*F+y*S,n[1]=h*R+v*O+y*B,n[2]=h*w+v*L+y*I,n[3]=h*P+v*C+y*U,n[4]=b*A+E*F+g*S,n[5]=b*R+E*O+g*B,n[6]=b*w+E*L+g*I,n[7]=b*P+E*C+g*U,n[8]=x*A+_*F+T*S,n[9]=x*R+_*O+T*B,n[10]=x*w+_*L+T*I,n[11]=x*P+_*C+T*U,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},t.axisRotation=function(e,t,r){r=r||new o(16);var n=e[0],i=e[1],a=e[2],u=Math.sqrt(n*n+i*i+a*a),s=(n/=u)*n,c=(i/=u)*i,f=(a/=u)*a,l=Math.cos(t),p=Math.sin(t),d=1-l;return r[0]=s+(1-s)*l,r[1]=n*i*d+a*p,r[2]=n*a*d-i*p,r[3]=0,r[4]=n*i*d-a*p,r[5]=c+(1-c)*l,r[6]=i*a*d+n*p,r[7]=0,r[8]=n*a*d+i*p,r[9]=i*a*d-n*p,r[10]=f+(1-f)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r},t.copy=s,t.frustum=function(e,t,r,n,i,a,u){u=u||new o(16);var s=t-e,c=n-r,f=i-a;return u[0]=2*i/s,u[1]=0,u[2]=0,u[3]=0,u[4]=0,u[5]=2*i/c,u[6]=0,u[7]=0,u[8]=(e+t)/s,u[9]=(n+r)/c,u[10]=a/f,u[11]=-1,u[12]=0,u[13]=0,u[14]=i*a/f,u[15]=0,u},t.getAxis=function(e,t,r){r=r||n.create();var o=4*t;return r[0]=e[o+0],r[1]=e[o+1],r[2]=e[o+2],r},t.getTranslation=function(e,t){return(t=t||n.create())[0]=e[12],t[1]=e[13],t[2]=e[14],t},t.identity=c,t.inverse=f,t.lookAt=function(e,t,r,s){s=s||new o(16);var c=i,f=a,l=u;return n.normalize(n.subtract(e,t,l),l),n.normalize(n.cross(r,l,c),c),n.normalize(n.cross(l,c,f),f),s[0]=c[0],s[1]=c[1],s[2]=c[2],s[3]=0,s[4]=f[0],s[5]=f[1],s[6]=f[2],s[7]=0,s[8]=l[0],s[9]=l[1],s[10]=l[2],s[11]=0,s[12]=e[0],s[13]=e[1],s[14]=e[2],s[15]=1,s},t.multiply=function(e,t,r){r=r||new o(16);var n=e[0],i=e[1],a=e[2],u=e[3],s=e[4],c=e[5],f=e[6],l=e[7],p=e[8],d=e[9],m=e[10],h=e[11],v=e[12],y=e[13],b=e[14],E=e[15],g=t[0],x=t[1],_=t[2],T=t[3],A=t[4],R=t[5],w=t[6],P=t[7],F=t[8],O=t[9],L=t[10],C=t[11],S=t[12],B=t[13],I=t[14],U=t[15];return r[0]=n*g+s*x+p*_+v*T,r[1]=i*g+c*x+d*_+y*T,r[2]=a*g+f*x+m*_+b*T,r[3]=u*g+l*x+h*_+E*T,r[4]=n*A+s*R+p*w+v*P,r[5]=i*A+c*R+d*w+y*P,r[6]=a*A+f*R+m*w+b*P,r[7]=u*A+l*R+h*w+E*P,r[8]=n*F+s*O+p*L+v*C,r[9]=i*F+c*O+d*L+y*C,r[10]=a*F+f*O+m*L+b*C,r[11]=u*F+l*O+h*L+E*C,r[12]=n*S+s*B+p*I+v*U,r[13]=i*S+c*B+d*I+y*U,r[14]=a*S+f*B+m*I+b*U,r[15]=u*S+l*B+h*I+E*U,r},t.negate=function(e,t){return(t=t||new o(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},t.ortho=function(e,t,r,n,i,a,u){return(u=u||new o(16))[0]=2/(t-e),u[1]=0,u[2]=0,u[3]=0,u[4]=0,u[5]=2/(n-r),u[6]=0,u[7]=0,u[8]=0,u[9]=0,u[10]=2/(i-a),u[11]=0,u[12]=(t+e)/(e-t),u[13]=(n+r)/(r-n),u[14]=(a+i)/(i-a),u[15]=1,u},t.perspective=function(e,t,r,n,i){i=i||new o(16);var a=Math.tan(.5*Math.PI-.5*e),u=1/(r-n);return i[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=(r+n)*u,i[11]=-1,i[12]=0,i[13]=0,i[14]=r*n*u*2,i[15]=0,i},t.rotateX=function(e,t,r){r=r||new o(16);var n=e[4],i=e[5],a=e[6],u=e[7],s=e[8],c=e[9],f=e[10],l=e[11],p=Math.cos(t),d=Math.sin(t);return r[4]=p*n+d*s,r[5]=p*i+d*c,r[6]=p*a+d*f,r[7]=p*u+d*l,r[8]=p*s-d*n,r[9]=p*c-d*i,r[10]=p*f-d*a,r[11]=p*l-d*u,e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},t.rotateY=function(e,t,r){r=r||new o(16);var n=e[0],i=e[1],a=e[2],u=e[3],s=e[8],c=e[9],f=e[10],l=e[11],p=Math.cos(t),d=Math.sin(t);return r[0]=p*n-d*s,r[1]=p*i-d*c,r[2]=p*a-d*f,r[3]=p*u-d*l,r[8]=p*s+d*n,r[9]=p*c+d*i,r[10]=p*f+d*a,r[11]=p*l+d*u,e!==r&&(r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},t.rotateZ=function(e,t,r){r=r||new o(16);var n=e[0],i=e[1],a=e[2],u=e[3],s=e[4],c=e[5],f=e[6],l=e[7],p=Math.cos(t),d=Math.sin(t);return r[0]=p*n+d*s,r[1]=p*i+d*c,r[2]=p*a+d*f,r[3]=p*u+d*l,r[4]=p*s-d*n,r[5]=p*c-d*i,r[6]=p*f-d*a,r[7]=p*l-d*u,e!==r&&(r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},t.rotationX=function(e,t){t=t||new o(16);var r=Math.cos(e),n=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},t.rotationY=function(e,t){t=t||new o(16);var r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},t.rotationZ=function(e,t){t=t||new o(16);var r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},t.scale=function(e,t,r){r=r||new o(16);var n=t[0],i=t[1],a=t[2];return r[0]=n*e[0],r[1]=n*e[1],r[2]=n*e[2],r[3]=n*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=a*e[8],r[9]=a*e[9],r[10]=a*e[10],r[11]=a*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},t.scaling=function(e,t){return(t=t||new o(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},t.setAxis=function(e,t,r,n){n!==e&&(n=s(e,n));var o=4*r;return n[o+0]=t[0],n[o+1]=t[1],n[o+2]=t[2],n},t.setDefaultType=function(e){var t=o;return o=e,t},t.setTranslation=function(e,t,r){return r=r||c(),e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11]),r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=1,r},t.transformDirection=function(e,t,r){r=r||n.create();var o=t[0],i=t[1],a=t[2];return r[0]=o*e[0]+i*e[4]+a*e[8],r[1]=o*e[1]+i*e[5]+a*e[9],r[2]=o*e[2]+i*e[6]+a*e[10],r},t.transformNormal=function(e,t,r){r=r||n.create();var o=f(e),i=t[0],a=t[1],u=t[2];return r[0]=i*o[0]+a*o[1]+u*o[2],r[1]=i*o[4]+a*o[5]+u*o[6],r[2]=i*o[8]+a*o[9]+u*o[10],r},t.transformPoint=function(e,t,r){r=r||n.create();var o=t[0],i=t[1],a=t[2],u=o*e[3]+i*e[7]+a*e[11]+e[15];return r[0]=(o*e[0]+i*e[4]+a*e[8]+e[12])/u,r[1]=(o*e[1]+i*e[5]+a*e[9]+e[13])/u,r[2]=(o*e[2]+i*e[6]+a*e[10]+e[14])/u,r},t.translate=function(e,t,r){r=r||new o(16);var n=t[0],i=t[1],a=t[2],u=e[0],s=e[1],c=e[2],f=e[3],l=e[4],p=e[5],d=e[6],m=e[7],h=e[8],v=e[9],y=e[10],b=e[11],E=e[12],g=e[13],x=e[14],_=e[15];return e!==r&&(r[0]=u,r[1]=s,r[2]=c,r[3]=f,r[4]=l,r[5]=p,r[6]=d,r[7]=m,r[8]=h,r[9]=v,r[10]=y,r[11]=b),r[12]=u*n+l*i+h*a+E,r[13]=s*n+p*i+v*a+g,r[14]=c*n+d*i+y*a+x,r[15]=f*n+m*i+b*a+_,r},t.translation=function(e,t){return(t=t||new o(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},t.transpose=function(e,t){var r;if((t=t||new o(16))===e)return r=e[1],e[1]=e[4],e[4]=r,r=e[2],e[2]=e[8],e[8]=r,r=e[3],e[3]=e[12],e[12]=r,r=e[6],e[6]=e[9],e[9]=r,r=e[7],e[7]=e[13],e[13]=r,r=e[11],e[11]=e[14],e[14]=r,t;var n=e[0],i=e[1],a=e[2],u=e[3],s=e[4],c=e[5],f=e[6],l=e[7],p=e[8],d=e[9],m=e[10],h=e[11],v=e[12],y=e[13],b=e[14],E=e[15];return t[0]=n,t[1]=s,t[2]=p,t[3]=v,t[4]=i,t[5]=c,t[6]=d,t[7]=y,t[8]=a,t[9]=f,t[10]=m,t[11]=b,t[12]=u,t[13]=l,t[14]=h,t[15]=E,t};var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(/*! ./v3.js */"./src/v3.js")),o=Float32Array,i=n.create(),a=n.create(),u=n.create();function s(e,t){return(t=t||new o(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(e){return(e=e||new o(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function f(e,t){t=t||new o(16);var r=e[0],n=e[1],i=e[2],a=e[3],u=e[4],s=e[5],c=e[6],f=e[7],l=e[8],p=e[9],d=e[10],m=e[11],h=e[12],v=e[13],y=e[14],b=e[15],E=d*b,g=y*m,x=c*b,_=y*f,T=c*m,A=d*f,R=i*b,w=y*a,P=i*m,F=d*a,O=i*f,L=c*a,C=l*v,S=h*p,B=u*v,I=h*s,U=u*p,M=l*s,j=r*v,D=h*n,N=r*p,k=l*n,z=r*s,X=u*n,G=E*s+_*p+T*v-(g*s+x*p+A*v),Y=g*n+R*p+F*v-(E*n+w*p+P*v),W=x*n+w*s+O*v-(_*n+R*s+L*v),V=A*n+P*s+L*p-(T*n+F*s+O*p),H=1/(r*G+u*Y+l*W+h*V);return t[0]=H*G,t[1]=H*Y,t[2]=H*W,t[3]=H*V,t[4]=H*(g*u+x*l+A*h-(E*u+_*l+T*h)),t[5]=H*(E*r+w*l+P*h-(g*r+R*l+F*h)),t[6]=H*(_*r+R*u+L*h-(x*r+w*u+O*h)),t[7]=H*(T*r+F*u+O*l-(A*r+P*u+L*l)),t[8]=H*(C*f+I*m+U*b-(S*f+B*m+M*b)),t[9]=H*(S*a+j*m+k*b-(C*a+D*m+N*b)),t[10]=H*(B*a+D*f+z*b-(I*a+j*f+X*b)),t[11]=H*(M*a+N*f+X*m-(U*a+k*f+z*m)),t[12]=H*(B*d+M*y+S*c-(U*y+C*c+I*d)),t[13]=H*(N*y+C*i+D*d-(j*d+k*y+S*i)),t[14]=H*(j*c+X*y+I*i-(z*y+B*i+D*c)),t[15]=H*(z*d+U*i+k*c-(N*c+X*d+M*i)),t}},"./src/primitives.js":
/*!***************************!*\
  !*** ./src/primitives.js ***!
  \***************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.create3DFVertices=P,t.createAugmentedTypedArray=p,t.createCubeVertices=A,t.createPlaneVertices=x,t.createSphereVertices=_,t.createTruncatedConeVertices=R,t.createXYQuadVertices=g,t.createCresentVertices=F,t.createCylinderVertices=O,t.createTorusVertices=L,t.createDiscVertices=C,t.deindexVertices=function(e){var t=e.indices,r={},n=t.length;return Object.keys(e).filter(d).forEach(function(o){for(var i=e[o],a=i.numComponents,u=p(a,n,i.constructor),s=0;s<n;++s)for(var c=t[s]*a,f=0;f<a;++f)u.push(i[c+f]);r[o]=u}),r},t.flattenNormals=function(e){if(e.indices)throw new Error("can not flatten normals of indexed vertices. deindex them first");for(var t=e.normal,r=t.length,n=0;n<r;n+=9){var o=t[n+0],i=t[n+1],a=t[n+2],u=t[n+3],s=t[n+4],c=t[n+5],f=t[n+6],l=t[n+7],p=t[n+8],d=o+u+f,m=i+s+l,h=a+c+p,v=Math.sqrt(d*d+m*m+h*h);d/=v,m/=v,h/=v,t[n+0]=d,t[n+1]=m,t[n+2]=h,t[n+3]=d,t[n+4]=m,t[n+5]=h,t[n+6]=d,t[n+7]=m,t[n+8]=h}return e},t.makeRandomVertexColors=function(e,t){t=t||{};var r=e.position.numElements,n=p(4,r,Uint8Array),o=t.rand||function(e,t){return t<3?(r=256,Math.random()*r|0):255;var r};if(e.color=n,e.indices)for(var i=0;i<r;++i)n.push(o(i,0),o(i,1),o(i,2),o(i,3));else for(var a=t.vertsPerColor||3,u=r/a,s=0;s<u;++s)for(var c=[o(s,0),o(s,1),o(s,2),o(s,3)],f=0;f<a;++f)n.push(c);return e},t.reorientDirections=v,t.reorientNormals=y,t.reorientPositions=b,t.reorientVertices=E,t.concatVertices=function(e){for(var t,r={},n=function(n){var o=e[n];Object.keys(o).forEach(function(e){r[e]||(r[e]=[]),t||"indices"===e||(t=e);var n=o[e],i=f(n,e),a=c(n).length/i;r[e].push(a)})},o=0;o<e.length;++o)n(o);var i=r[t],a={};return Object.keys(r).forEach(function(t){var r=function(t){for(var r,n=0,o=0;o<e.length;++o){var i=e[o][t],a=c(i);n+=a.length,r&&!i.data||(r=i)}return{length:n,spec:r}}(t),n=M(r.spec,r.length);!function(t,r,n){for(var o=0,i=0,a=0;a<e.length;++a){var u=e[a][t],s=c(u);"indices"===t?(U(s,n,i,o),o+=r[a]):U(s,n,i),i+=s.length}}(t,i,c(n)),a[t]=n}),a},t.duplicateVertices=function(e){var t={};return Object.keys(e).forEach(function(r){var n=e[r],o=c(n),i=M(n,o.length);U(o,c(i),0),t[r]=i}),t},t.createDiscBuffers=t.createDiscBufferInfo=t.createTorusBuffers=t.createTorusBufferInfo=t.createCylinderBuffers=t.createCylinderBufferInfo=t.createCresentBuffers=t.createCresentBufferInfo=t.createXYQuadBuffers=t.createXYQuadBufferInfo=t.createTruncatedConeBuffers=t.createTruncatedConeBufferInfo=t.createSphereBuffers=t.createSphereBufferInfo=t.createPlaneBuffers=t.createPlaneBufferInfo=t.createCubeBuffers=t.createCubeBufferInfo=t.create3DFBuffers=t.create3DFBufferInfo=void 0;var n=s(r(/*! ./attributes.js */"./src/attributes.js")),o=s(r(/*! ./helper.js */"./src/helper.js")),i=s(r(/*! ./typedarrays.js */"./src/typedarrays.js")),a=s(r(/*! ./m4.js */"./src/m4.js")),u=s(r(/*! ./v3.js */"./src/v3.js"));function s(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}var c=n.getArray_,f=n.getNumComponents_;function l(e,t){var r=0;return e.push=function(){for(var t=0;t<arguments.length;++t){var n=arguments[t];if(n instanceof Array||i.isArrayBuffer(n))for(var o=0;o<n.length;++o)e[r++]=n[o];else e[r++]=n}},e.reset=function(e){r=e||0},e.numComponents=t,Object.defineProperty(e,"numElements",{get:function(){return this.length/this.numComponents|0}}),e}function p(e,t,r){return l(new(r||Float32Array)(e*t),e)}function d(e){return"indices"!==e}function m(e,t,r){for(var n=e.length,o=new Float32Array(3),i=0;i<n;i+=3)r(t,[e[i],e[i+1],e[i+2]],o),e[i]=o[0],e[i+1]=o[1],e[i+2]=o[2]}function h(e,t,r){r=r||u.create();var n=t[0],o=t[1],i=t[2];return r[0]=n*e[0]+o*e[1]+i*e[2],r[1]=n*e[4]+o*e[5]+i*e[6],r[2]=n*e[8]+o*e[9]+i*e[10],r}function v(e,t){return m(e,t,a.transformDirection),e}function y(e,t){return m(e,a.inverse(t),h),e}function b(e,t){return m(e,t,a.transformPoint),e}function E(e,t){return Object.keys(e).forEach(function(r){var n=e[r];r.indexOf("pos")>=0?b(n,t):r.indexOf("tan")>=0||r.indexOf("binorm")>=0?v(n,t):r.indexOf("norm")>=0&&y(n,t)}),e}function g(e,t,r){return e=e||2,{position:{numComponents:2,data:[(t=t||0)+-1*(e*=.5),(r=r||0)+-1*e,t+1*e,r+-1*e,t+-1*e,r+1*e,t+1*e,r+1*e]},normal:[0,0,1,0,0,1,0,0,1,0,0,1],texcoord:[0,0,1,0,0,1,1,1],indices:[0,1,2,2,1,3]}}function x(e,t,r,n,o){e=e||1,t=t||1,r=r||1,n=n||1,o=o||a.identity();for(var i=(r+1)*(n+1),u=p(3,i),s=p(3,i),c=p(2,i),f=0;f<=n;f++)for(var l=0;l<=r;l++){var d=l/r,m=f/n;u.push(e*d-.5*e,0,t*m-.5*t),s.push(0,1,0),c.push(d,m)}for(var h=r+1,v=p(3,r*n*2,Uint16Array),y=0;y<n;y++)for(var b=0;b<r;b++)v.push((y+0)*h+b,(y+1)*h+b,(y+0)*h+b+1),v.push((y+1)*h+b,(y+1)*h+b+1,(y+0)*h+b+1);return E({position:u,normal:s,texcoord:c,indices:v},o)}function _(e,t,r,n,o,i,a){if(t<=0||r<=0)throw new Error("subdivisionAxis and subdivisionHeight must be > 0");n=n||0,i=i||0;for(var u=(o=o||Math.PI)-n,s=(a=a||2*Math.PI)-i,c=(t+1)*(r+1),f=p(3,c),l=p(3,c),d=p(2,c),m=0;m<=r;m++)for(var h=0;h<=t;h++){var v=h/t,y=m/r,b=s*v+i,E=u*y+n,g=Math.sin(b),x=Math.cos(b),_=Math.sin(E),T=x*_,A=Math.cos(E),R=g*_;f.push(e*T,e*A,e*R),l.push(T,A,R),d.push(1-v,y)}for(var w=t+1,P=p(3,t*r*2,Uint16Array),F=0;F<t;F++)for(var O=0;O<r;O++)P.push((O+0)*w+F,(O+0)*w+F+1,(O+1)*w+F),P.push((O+1)*w+F,(O+0)*w+F+1,(O+1)*w+F+1);return{position:f,normal:l,texcoord:d,indices:P}}var T=[[3,7,5,1],[6,2,0,4],[6,7,3,2],[0,1,5,4],[7,6,4,5],[2,3,1,0]];function A(e){for(var t=(e=e||1)/2,r=[[-t,-t,-t],[+t,-t,-t],[-t,+t,-t],[+t,+t,-t],[-t,-t,+t],[+t,-t,+t],[-t,+t,+t],[+t,+t,+t]],n=[[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]],o=[[1,0],[0,0],[0,1],[1,1]],i=p(3,24),a=p(3,24),u=p(2,24),s=p(3,12,Uint16Array),c=0;c<6;++c){for(var f=T[c],l=0;l<4;++l){var d=r[f[l]],m=n[c],h=o[l];i.push(d),a.push(m),u.push(h)}var v=4*c;s.push(v+0,v+1,v+2),s.push(v+0,v+2,v+3)}return{position:i,normal:a,texcoord:u,indices:s}}function R(e,t,r,n,o,i,a){if(n<3)throw new Error("radialSubdivisions must be 3 or greater");if(o<1)throw new Error("verticalSubdivisions must be 1 or greater");for(var u=void 0===i||i,s=void 0===a||a,c=(u?2:0)+(s?2:0),f=(n+1)*(o+1+c),l=p(3,f),d=p(3,f),m=p(2,f),h=p(3,n*(o+c)*2,Uint16Array),v=n+1,y=Math.atan2(e-t,r),b=Math.cos(y),E=Math.sin(y),g=o+(s?2:0),x=u?-2:0;x<=g;++x){var _=x/o,T=r*_,A=void 0;x<0?(T=0,_=1,A=e):x>o?(T=r,_=1,A=t):A=e+x/o*(t-e),-2!==x&&x!==o+2||(A=0,_=0),T-=r/2;for(var R=0;R<v;++R){var w=Math.sin(R*Math.PI*2/n),P=Math.cos(R*Math.PI*2/n);l.push(w*A,T,P*A),d.push(x<0||x>o?0:w*b,x<0?-1:x>o?1:E,x<0||x>o?0:P*b),m.push(R/n,1-_)}}for(var F=0;F<o+c;++F)for(var O=0;O<n;++O)h.push(v*(F+0)+0+O,v*(F+0)+1+O,v*(F+1)+1+O),h.push(v*(F+0)+0+O,v*(F+1)+1+O,v*(F+1)+0+O);return{position:l,normal:d,texcoord:m,indices:h}}function w(e,t){t=t||[];for(var r=[],n=0;n<e.length;n+=4){var o=e[n],i=e.slice(n+1,n+4);i.push.apply(i,t);for(var a=0;a<o;++a)r.push.apply(r,i)}return r}function P(){var e=[0,0,0,0,150,0,30,0,0,0,150,0,30,150,0,30,0,0,30,0,0,30,30,0,100,0,0,30,30,0,100,30,0,100,0,0,30,60,0,30,90,0,67,60,0,30,90,0,67,90,0,67,60,0,0,0,30,30,0,30,0,150,30,0,150,30,30,0,30,30,150,30,30,0,30,100,0,30,30,30,30,30,30,30,100,0,30,100,30,30,30,60,30,67,60,30,30,90,30,30,90,30,67,60,30,67,90,30,0,0,0,100,0,0,100,0,30,0,0,0,100,0,30,0,0,30,100,0,0,100,30,0,100,30,30,100,0,0,100,30,30,100,0,30,30,30,0,30,30,30,100,30,30,30,30,0,100,30,30,100,30,0,30,30,0,30,60,30,30,30,30,30,30,0,30,60,0,30,60,30,30,60,0,67,60,30,30,60,30,30,60,0,67,60,0,67,60,30,67,60,0,67,90,30,67,60,30,67,60,0,67,90,0,67,90,30,30,90,0,30,90,30,67,90,30,30,90,0,67,90,30,67,90,0,30,90,0,30,150,30,30,90,30,30,90,0,30,150,0,30,150,30,0,150,0,0,150,30,30,150,30,0,150,0,30,150,30,30,150,0,0,0,0,0,0,30,0,150,30,0,0,0,0,150,30,0,150,0],t=w([18,0,0,1,18,0,0,-1,6,0,1,0,6,1,0,0,6,0,-1,0,6,1,0,0,6,0,1,0,6,1,0,0,6,0,-1,0,6,1,0,0,6,0,-1,0,6,-1,0,0]),r=w([18,200,70,120,18,80,70,200,6,70,200,210,6,200,200,70,6,210,100,70,6,210,160,70,6,70,180,210,6,100,70,210,6,76,210,100,6,140,210,80,6,90,130,110,6,160,160,220],[255]),n=e.length/3,o={position:p(3,n),texcoord:p(2,n),normal:p(3,n),color:p(4,n,Uint8Array),indices:p(3,n/3,Uint16Array)};o.position.push(e),o.texcoord.push([.22,.19,.22,.79,.34,.19,.22,.79,.34,.79,.34,.19,.34,.19,.34,.31,.62,.19,.34,.31,.62,.31,.62,.19,.34,.43,.34,.55,.49,.43,.34,.55,.49,.55,.49,.43,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0]),o.normal.push(t),o.color.push(r);for(var i=0;i<n;++i)o.indices.push(i);return o}function F(e,t,r,n,o,i,a){if(o<=0)throw new Error("subdivisionDown must be > 0");var s=2,c=(a=a||1)-(i=i||0),f=2*(o+1)*(2+s),l=p(3,f),d=p(3,f),m=p(2,f);function h(e,t,r){return e+(t-e)*r}function v(t,r,a,f,p,v){for(var y=0;y<=o;y++){var b=r/(s-1),E=y/o,g=2*(b-.5),x=(i+E*c)*Math.PI,_=Math.sin(x),T=Math.cos(x),A=h(e,t,_),R=g*n,w=T*e,P=_*A;l.push(R,w,P);var F=u.add(u.multiply([0,_,T],a),f);d.push(F),m.push(b*p+v,E)}}for(var y=0;y<s;y++){var b=2*(y/(s-1)-.5);v(t,y,[1,1,1],[0,0,0],1,0),v(t,y,[0,0,0],[b,0,0],0,0),v(r,y,[1,1,1],[0,0,0],1,0),v(r,y,[0,0,0],[b,0,0],0,1)}var E=p(3,2*o*(2+s),Uint16Array);function g(e,t){for(var r=0;r<o;++r)E.push(e+r+0,e+r+1,t+r+0),E.push(e+r+1,t+r+1,t+r+0)}var x=o+1;return g(0*x,4*x),g(5*x,7*x),g(6*x,2*x),g(3*x,1*x),{position:l,normal:d,texcoord:m,indices:E}}function O(e,t,r,n,o,i){return R(e,e,t,r,n,o,i)}function L(e,t,r,n,o,i){if(r<3)throw new Error("radialSubdivisions must be 3 or greater");if(n<3)throw new Error("verticalSubdivisions must be 3 or greater");o=o||0;for(var a=(i=i||2*Math.PI)-o,u=r+1,s=n+1,c=u*s,f=p(3,c),l=p(3,c),d=p(2,c),m=p(3,r*n*2,Uint16Array),h=0;h<s;++h)for(var v=h/n,y=v*Math.PI*2,b=Math.sin(y),E=e+b*t,g=Math.cos(y),x=g*t,_=0;_<u;++_){var T=_/r,A=o+T*a,R=Math.sin(A),w=Math.cos(A),P=R*E,F=w*E,O=R*b,L=w*b;f.push(P,x,F),l.push(O,g,L),d.push(T,1-v)}for(var C=0;C<n;++C)for(var S=0;S<r;++S){var B=1+S,I=1+C;m.push(u*C+S,u*I+S,u*C+B),m.push(u*I+S,u*I+B,u*C+B)}return{position:f,normal:l,texcoord:d,indices:m}}function C(e,t,r,n,o){if(t<3)throw new Error("divisions must be at least 3");o=o||1,n=n||0;for(var i=(t+1)*((r=r||1)+1),a=p(3,i),u=p(3,i),s=p(2,i),c=p(3,r*t*2,Uint16Array),f=0,l=e-n,d=t+1,m=0;m<=r;++m){for(var h=n+l*Math.pow(m/r,o),v=0;v<=t;++v){var y=2*Math.PI*v/t,b=h*Math.cos(y),E=h*Math.sin(y);if(a.push(b,0,E),u.push(0,1,0),s.push(1-v/t,m/r),m>0&&v!==t){var g=f+(v+1),x=f+v,_=f+v-d,T=f+(v+1)-d;c.push(g,x,_),c.push(g,_,T)}}f+=t+1}return{position:a,normal:u,texcoord:s,indices:c}}function S(e){return function(t){var r=e.apply(this,Array.prototype.slice.call(arguments,1));return n.createBuffersFromArrays(t,r)}}function B(e){return function(t){var r=e.apply(null,Array.prototype.slice.call(arguments,1));return n.createBufferInfoFromArrays(t,r)}}var I=["numComponents","size","type","normalize","stride","offset","attrib","name","attribName"];function U(e,t,r,n){n=n||0;for(var o=e.length,i=0;i<o;++i)t[r+i]=e[i]+n}function M(e,t){var r=c(e),n=new r.constructor(t),i=n;return r.numComponents&&r.numElements&&l(n,r.numComponents),e.data&&(i={data:n},o.copyNamedProperties(I,e,i)),i}var j=B(P);t.create3DFBufferInfo=j;var D=S(P);t.create3DFBuffers=D;var N=B(A);t.createCubeBufferInfo=N;var k=S(A);t.createCubeBuffers=k;var z=B(x);t.createPlaneBufferInfo=z;var X=S(x);t.createPlaneBuffers=X;var G=B(_);t.createSphereBufferInfo=G;var Y=S(_);t.createSphereBuffers=Y;var W=B(R);t.createTruncatedConeBufferInfo=W;var V=S(R);t.createTruncatedConeBuffers=V;var H=B(g);t.createXYQuadBufferInfo=H;var K=S(g);t.createXYQuadBuffers=K;var q=B(F);t.createCresentBufferInfo=q;var Z=S(F);t.createCresentBuffers=Z;var J=B(O);t.createCylinderBufferInfo=J;var Q=S(O);t.createCylinderBuffers=Q;var $=B(L);t.createTorusBufferInfo=$;var ee=S(L);t.createTorusBuffers=ee;var te=B(C);t.createDiscBufferInfo=te;var re=S(C);t.createDiscBuffers=re},"./src/programs.js":
/*!*************************!*\
  !*** ./src/programs.js ***!
  \*************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.createAttributeSetters=k,t.createProgram=O,t.createProgramFromScripts=function(e,t,r,n,o){for(var i=R(r,n,o),a=[],u=0;u<t.length;++u){var s=L(e,t[u],e[w[u]],i.errorCallback);if(!s)return null;a.push(s)}return O(e,a,i)},t.createProgramFromSources=C,t.createProgramInfo=function(e,t,r,n,o){var i=R(r,n,o),a=!0;if(t=t.map(function(e){if(e.indexOf("\n")<0){var t=s(e);t?e=t.text:(i.errorCallback("no element with id: "+e),a=!1)}return e}),!a)return null;var u=C(e,t,i);return u?X(e,u):null},t.createProgramInfoFromProgram=X,t.createUniformSetters=B,t.createUniformBlockSpecFromProgram=M,t.createUniformBlockInfoFromProgram=D,t.createUniformBlockInfo=function(e,t,r){return D(e,t.program,t.uniformBlockSpec,r)},t.createTransformFeedback=function(e,t,r){var n=e.createTransformFeedback();return e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,n),e.useProgram(t.program),U(e,t,r),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,null),n},t.createTransformFeedbackInfo=I,t.bindTransformFeedbackInfo=U,t.setAttributes=z,t.setBuffersAndAttributes=function(e,t,r){r.vertexArrayObject?e.bindVertexArray(r.vertexArrayObject):(z(t.attribSetters||t,r.attribs),r.indices&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.indices))},t.setUniforms=function e(t,r){for(var n=t.uniformSetters||t,o=arguments.length,i=1;i<o;++i){var a=arguments[i];if(Array.isArray(a))for(var u=a.length,s=0;s<u;++s)e(n,a[s]);else for(var c in a){var f=n[c];f&&f(a[c])}}},t.setUniformBlock=function(e,t,r){N(e,t,r)&&e.bufferData(e.UNIFORM_BUFFER,r.array,e.DYNAMIC_DRAW)},t.setBlockUniforms=function(e,t){var r=e.uniforms;for(var n in t){var o=r[n];if(o){var i=t[n];i.length?o.set(i):o[0]=i}}},t.bindUniformBlock=N;var n=i(r(/*! ./utils.js */"./src/utils.js")),o=i(r(/*! ./helper.js */"./src/helper.js"));function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}var a=o.error,u=o.warn,s="undefined"!=typeof document&&document.getElementById?document.getElementById.bind(document):function(){return null},c={};function f(e,t){return c[t].bindPoint}function l(e,t){return function(r){e.uniform1i(t,r)}}function p(e,t){return function(r){e.uniform1iv(t,r)}}function d(e,t){return function(r){e.uniform2iv(t,r)}}function m(e,t){return function(r){e.uniform3iv(t,r)}}function h(e,t){return function(r){e.uniform4iv(t,r)}}function v(e,t,r,i){var a=f(0,t);return n.isWebGL2(e)?function(t){var n,u;o.isTexture(e,t)?(n=t,u=null):(n=t.texture,u=t.sampler),e.uniform1i(i,r),e.activeTexture(e.TEXTURE0+r),e.bindTexture(a,n),e.bindSampler(r,u)}:function(t){e.uniform1i(i,r),e.activeTexture(e.TEXTURE0+r),e.bindTexture(a,t)}}function y(e,t,r,i,a){for(var u=f(0,t),s=new Int32Array(a),c=0;c<a;++c)s[c]=r+c;return n.isWebGL2(e)?function(t){e.uniform1iv(i,s),t.forEach(function(t,n){var i,a;e.activeTexture(e.TEXTURE0+s[n]),o.isTexture(e,t)?(i=t,a=null):(i=t.texture,a=t.sampler),e.bindSampler(r,a),e.bindTexture(u,i)})}:function(t){e.uniform1iv(i,s),t.forEach(function(t,r){e.activeTexture(e.TEXTURE0+s[r]),e.bindTexture(u,t)})}}function b(e,t){return function(r){if(r.value)switch(e.disableVertexAttribArray(t),r.value.length){case 4:e.vertexAttrib4fv(t,r.value);break;case 3:e.vertexAttrib3fv(t,r.value);break;case 2:e.vertexAttrib2fv(t,r.value);break;case 1:e.vertexAttrib1fv(t,r.value);break;default:throw new Error("the length of a float constant value must be between 1 and 4!")}else e.bindBuffer(e.ARRAY_BUFFER,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribPointer(t,r.numComponents||r.size,r.type||e.FLOAT,r.normalize||!1,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function E(e,t){return function(r){if(r.value){if(e.disableVertexAttribArray(t),4!==r.value.length)throw new Error("The length of an integer constant value must be 4!");e.vertexAttrib4iv(t,r.value)}else e.bindBuffer(e.ARRAY_BUFFER,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribIPointer(t,r.numComponents||r.size,r.type||e.INT,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function g(e,t){return function(r){if(r.value){if(e.disableVertexAttribArray(t),4!==r.value.length)throw new Error("The length of an unsigned integer constant value must be 4!");e.vertexAttrib4uiv(t,r.value)}else e.bindBuffer(e.ARRAY_BUFFER,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribIPointer(t,r.numComponents||r.size,r.type||e.UNSIGNED_INT,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function x(e,t,r){var n=r.size,o=r.count;return function(r){e.bindBuffer(e.ARRAY_BUFFER,r.buffer);for(var i=r.size||r.numComponents||n,a=i/o,u=r.type||e.FLOAT,s=c[u].size*i,f=r.normalize||!1,l=r.offset||0,p=s/o,d=0;d<o;++d)e.enableVertexAttribArray(t+d),e.vertexAttribPointer(t+d,a,u,f,s,l+p*d),void 0!==r.divisor&&e.vertexAttribDivisor(t+d,r.divisor)}}c[5126]={Type:Float32Array,size:4,setter:function(e,t){return function(r){e.uniform1f(t,r)}},arraySetter:function(e,t){return function(r){e.uniform1fv(t,r)}}},c[35664]={Type:Float32Array,size:8,setter:function(e,t){return function(r){e.uniform2fv(t,r)}}},c[35665]={Type:Float32Array,size:12,setter:function(e,t){return function(r){e.uniform3fv(t,r)}}},c[35666]={Type:Float32Array,size:16,setter:function(e,t){return function(r){e.uniform4fv(t,r)}}},c[5124]={Type:Int32Array,size:4,setter:l,arraySetter:p},c[35667]={Type:Int32Array,size:8,setter:d},c[35668]={Type:Int32Array,size:12,setter:m},c[35669]={Type:Int32Array,size:16,setter:h},c[5125]={Type:Uint32Array,size:4,setter:function(e,t){return function(r){e.uniform1ui(t,r)}},arraySetter:function(e,t){return function(r){e.uniform1uiv(t,r)}}},c[36294]={Type:Uint32Array,size:8,setter:function(e,t){return function(r){e.uniform2uiv(t,r)}}},c[36295]={Type:Uint32Array,size:12,setter:function(e,t){return function(r){e.uniform3uiv(t,r)}}},c[36296]={Type:Uint32Array,size:16,setter:function(e,t){return function(r){e.uniform4uiv(t,r)}}},c[35670]={Type:Uint32Array,size:4,setter:l,arraySetter:p},c[35671]={Type:Uint32Array,size:8,setter:d},c[35672]={Type:Uint32Array,size:12,setter:m},c[35673]={Type:Uint32Array,size:16,setter:h},c[35674]={Type:Float32Array,size:16,setter:function(e,t){return function(r){e.uniformMatrix2fv(t,!1,r)}}},c[35675]={Type:Float32Array,size:36,setter:function(e,t){return function(r){e.uniformMatrix3fv(t,!1,r)}}},c[35676]={Type:Float32Array,size:64,setter:function(e,t){return function(r){e.uniformMatrix4fv(t,!1,r)}}},c[35685]={Type:Float32Array,size:24,setter:function(e,t){return function(r){e.uniformMatrix2x3fv(t,!1,r)}}},c[35686]={Type:Float32Array,size:32,setter:function(e,t){return function(r){e.uniformMatrix2x4fv(t,!1,r)}}},c[35687]={Type:Float32Array,size:24,setter:function(e,t){return function(r){e.uniformMatrix3x2fv(t,!1,r)}}},c[35688]={Type:Float32Array,size:48,setter:function(e,t){return function(r){e.uniformMatrix3x4fv(t,!1,r)}}},c[35689]={Type:Float32Array,size:32,setter:function(e,t){return function(r){e.uniformMatrix4x2fv(t,!1,r)}}},c[35690]={Type:Float32Array,size:48,setter:function(e,t){return function(r){e.uniformMatrix4x3fv(t,!1,r)}}},c[35678]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:3553},c[35680]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:34067},c[35679]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:32879},c[35682]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:3553},c[36289]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:35866},c[36292]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:35866},c[36293]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:34067},c[36298]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:3553},c[36299]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:32879},c[36300]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:34067},c[36303]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:35866},c[36306]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:3553},c[36307]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:32879},c[36308]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:34067},c[36311]={Type:null,size:0,setter:v,arraySetter:y,bindPoint:35866};var _={};_[5126]={size:4,setter:b},_[35664]={size:8,setter:b},_[35665]={size:12,setter:b},_[35666]={size:16,setter:b},_[5124]={size:4,setter:E},_[35667]={size:8,setter:E},_[35668]={size:12,setter:E},_[35669]={size:16,setter:E},_[5125]={size:4,setter:g},_[36294]={size:8,setter:g},_[36295]={size:12,setter:g},_[36296]={size:16,setter:g},_[35670]={size:4,setter:E},_[35671]={size:8,setter:E},_[35672]={size:12,setter:E},_[35673]={size:16,setter:E},_[35674]={size:4,setter:x,count:2},_[35675]={size:9,setter:x,count:3},_[35676]={size:16,setter:x,count:4};var T=/^[ \t]*\n/;function A(e,t,r,n){var o=n||a,i=e.createShader(r),u=0;if(T.test(t)&&(u=1,t=t.replace(T,"")),e.shaderSource(i,t),e.compileShader(i),!e.getShaderParameter(i,e.COMPILE_STATUS)){var s=e.getShaderInfoLog(i);return o(function(e,t){return t=t||0,++t,e.split("\n").map(function(e,r){return r+t+": "+e}).join("\n")}(t,u)+"\n*** Error compiling shader: "+s),e.deleteShader(i),null}return i}function R(e,t,r){var n;if("function"==typeof t&&(r=t,t=void 0),"function"==typeof e)r=e,e=void 0;else if(e&&!Array.isArray(e)){if(e.errorCallback)return e;var o=e;r=o.errorCallback,e=o.attribLocations,n=o.transformFeedbackVaryings}var i={errorCallback:r||a,transformFeedbackVaryings:n};if(e){var u={};Array.isArray(e)?e.forEach(function(e,r){u[e]=t?t[r]:r}):u=e,i.attribLocations=u}return i}var w=["VERTEX_SHADER","FRAGMENT_SHADER"];function P(e,t){return t.indexOf("frag")>=0?e.FRAGMENT_SHADER:t.indexOf("vert")>=0?e.VERTEX_SHADER:void 0}function F(e,t){t.forEach(function(t){e.deleteShader(t)})}function O(e,t,r,n,i){for(var a=R(r,n,i),u=[],c=[],f=0;f<t.length;++f){var l=t[f];if("string"==typeof l){var p=s(l),d=p?p.text:l,m=e[w[f]];p&&p.type&&(m=P(e,p.type)||m),l=A(e,d,m,a.errorCallback),c.push(l)}o.isShader(e,l)&&u.push(l)}if(u.length!==t.length)return a.errorCallback("not enough shaders for program"),F(e,c),null;var h=e.createProgram();u.forEach(function(t){e.attachShader(h,t)}),a.attribLocations&&Object.keys(a.attribLocations).forEach(function(t){e.bindAttribLocation(h,a.attribLocations[t],t)});var v=a.transformFeedbackVaryings;if(v&&(v.attribs&&(v=v.attribs),Array.isArray(v)||(v=Object.keys(v)),e.transformFeedbackVaryings(h,v,a.transformFeedbackMode||e.SEPARATE_ATTRIBS)),e.linkProgram(h),!e.getProgramParameter(h,e.LINK_STATUS)){var y=e.getProgramInfoLog(h);return a.errorCallback("Error in program linking:"+y),e.deleteProgram(h),F(e,c),null}return h}function L(e,t,r,n){var o,i=s(t);if(!i)throw new Error("unknown script element: ".concat(t));o=i.text;var a=r||P(e,i.type);if(!a)throw new Error("unknown shader type");return A(e,o,a,n)}function C(e,t,r,n,o){for(var i=R(r,n,o),a=[],u=0;u<t.length;++u){var s=A(e,t[u],e[w[u]],i.errorCallback);if(!s)return null;a.push(s)}return O(e,a,i)}function S(e){var t=e.name;return t.startsWith("gl_")||t.startsWith("webgl_")}function B(e,t){var r=0;function n(t,n){var o,i=e.getUniformLocation(t,n.name),a=n.size>1&&"[0]"===n.name.substr(-3),u=n.type,s=c[u];if(!s)throw new Error("unknown type: 0x".concat(u.toString(16)));if(s.bindPoint){var f=r;r+=n.size,o=a?s.arraySetter(e,u,f,i,n.size):s.setter(e,u,f,i,n.size)}else o=s.arraySetter&&a?s.arraySetter(e,i):s.setter(e,i);return o.location=i,o}for(var o={},i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),a=0;a<i;++a){var u=e.getActiveUniform(t,a);if(!S(u)){var s=u.name;"[0]"===s.substr(-3)&&(s=s.substr(0,s.length-3));var f=n(t,u);o[s]=f}}return o}function I(e,t){for(var r={},n=e.getProgramParameter(t,e.TRANSFORM_FEEDBACK_VARYINGS),o=0;o<n;++o){var i=e.getTransformFeedbackVarying(t,o);r[i.name]={index:o,type:i.type,size:i.size}}return r}function U(e,t,r){for(var n in t.transformFeedbackInfo&&(t=t.transformFeedbackInfo),r.attribs&&(r=r.attribs),r){var o=t[n];if(o){var i=r[n];i.offset?e.bindBufferRange(e.TRANSFORM_FEEDBACK_BUFFER,o.index,i.buffer,i.offset,i.size):e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,o.index,i.buffer)}}}function M(e,t){for(var r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=[],o=[],i=0;i<r;++i){o.push(i),n.push({});var a=e.getActiveUniform(t,i);if(S(a))break;n[i].name=a.name}[["UNIFORM_TYPE","type"],["UNIFORM_SIZE","size"],["UNIFORM_BLOCK_INDEX","blockNdx"],["UNIFORM_OFFSET","offset"]].forEach(function(r){var i=r[0],a=r[1];e.getActiveUniforms(t,o,e[i]).forEach(function(e,t){n[t][a]=e})});for(var u={},s=e.getProgramParameter(t,e.ACTIVE_UNIFORM_BLOCKS),c=0;c<s;++c){var f=e.getActiveUniformBlockName(t,c),l={index:c,usedByVertexShader:e.getActiveUniformBlockParameter(t,c,e.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),usedByFragmentShader:e.getActiveUniformBlockParameter(t,c,e.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),size:e.getActiveUniformBlockParameter(t,c,e.UNIFORM_BLOCK_DATA_SIZE),uniformIndices:e.getActiveUniformBlockParameter(t,c,e.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)};l.used=l.usedByVertexSahder||l.usedByFragmentShader,u[f]=l}return{blockSpecs:u,uniformData:n}}var j=/\[\d+\]\.$/;function D(e,t,r,n){var o=r.blockSpecs,i=r.uniformData,a=o[n];if(!a)return u("no uniform block object named:",n),{name:n,uniforms:{}};var s=new ArrayBuffer(a.size),f=e.createBuffer(),l=a.index;e.bindBuffer(e.UNIFORM_BUFFER,f),e.uniformBlockBinding(t,a.index,l);var p=n+".";j.test(p)&&(p=p.replace(j,"."));var d={};return a.uniformIndices.forEach(function(e){var t=i[e],r=c[t.type],n=r.Type,o=t.size*r.size,a=t.name;a.substr(0,p.length)===p&&(a=a.substr(p.length)),d[a]=new n(s,t.offset,o/n.BYTES_PER_ELEMENT)}),{name:n,array:s,asFloat:new Float32Array(s),buffer:f,uniforms:d}}function N(e,t,r){var n=(t.uniformBlockSpec||t).blockSpecs[r.name];if(n){var o=n.index;return e.bindBufferRange(e.UNIFORM_BUFFER,o,r.buffer,r.offset||0,r.array.byteLength),!0}return!1}function k(e,t){for(var r={},n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),o=0;o<n;++o){var i=e.getActiveAttrib(t,o);if(!S(i)){var a=e.getAttribLocation(t,i.name),u=_[i.type],s=u.setter(e,a,u);s.location=a,r[i.name]=s}}return r}function z(e,t){for(var r in t){var n=e[r];n&&n(t[r])}}function X(e,t){var r={program:t,uniformSetters:B(e,t),attribSetters:k(e,t)};return n.isWebGL2(e)&&(r.uniformBlockSpec=M(e,t),r.transformFeedbackInfo=I(e,t)),r}},"./src/textures.js":
/*!*************************!*\
  !*** ./src/textures.js ***!
  \*************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.setTextureDefaults_=function(e){i.copyExistingProperties(e,u),e.textureColor&&T(e.textureColor)},t.createSampler=S,t.createSamplers=function(e,t){var r={};return Object.keys(t).forEach(function(n){r[n]=S(e,t[n])}),r},t.setSamplerParameters=C,t.createTexture=K,t.setEmptyTexture=H,t.setTextureFromArray=V,t.loadTextureFromUrl=G,t.setTextureFromElement=j,t.setTextureFilteringForSize=B,t.setTextureParameters=L,t.setDefaultTextureColor=T,t.createTextures=function(e,t,r){r=r||D;var n=0,o=[],i={},a={};function u(){0===n&&setTimeout(function(){r(o.length?o:void 0,i,a)},0)}return Object.keys(t).forEach(function(r){var s,c,f=t[r];("string"==typeof(c=f.src)||Array.isArray(c)&&"string"==typeof c[0])&&(s=function(e,t,i){a[r]=i,--n,e&&o.push(e),u()},++n),i[r]=K(e,f,s)}),u(),i},t.resizeTexture=function(e,t,r,n,o){n=n||r.width,o=o||r.height;var i=r.target||e.TEXTURE_2D;e.bindTexture(i,t);var a,u=r.level||0,c=r.internalFormat||r.format||e.RGBA,f=y(c),l=r.format||f.format,p=r.src;if(a=p&&(s(p)||Array.isArray(p)&&"number"==typeof p[0])?r.type||x(e,p,f.type):r.type||f.type,i===e.TEXTURE_CUBE_MAP)for(var d=0;d<6;++d)e.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+d,u,c,n,o,0,l,a,null);else e.texImage2D(i,u,c,n,o,0,l,a,null)},t.canGenerateMipmap=E,t.canFilter=g,t.getNumComponentsForFormat=function(e){var t=p[e];if(!t)throw"unknown format: "+e;return t.numColorComponents},t.getBytesPerElementForInternalFormat=v,t.getFormatAndTypeForInternalFormat=y;var n=a(r(/*! ./utils.js */"./src/utils.js")),o=a(r(/*! ./typedarrays.js */"./src/typedarrays.js")),i=a(r(/*! ./helper.js */"./src/helper.js"));function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}var u={textureColor:new Uint8Array([128,192,255,255]),textureOptions:{},crossOrigin:void 0},s=o.isArrayBuffer,c="undefined"!=typeof document&&document.createElement?document.createElement("canvas").getContext("2d"):null,f=6407,l=33319,p={},d=p;d[6406]={numColorComponents:1},d[6409]={numColorComponents:1},d[6410]={numColorComponents:2},d[f]={numColorComponents:3},d[6408]={numColorComponents:4},d[6403]={numColorComponents:1},d[36244]={numColorComponents:1},d[l]={numColorComponents:2},d[33320]={numColorComponents:2},d[f]={numColorComponents:3},d[36248]={numColorComponents:3},d[6408]={numColorComponents:4},d[36249]={numColorComponents:4},d[6402]={numColorComponents:1},d[34041]={numColorComponents:2};var m={},h=m;function v(e,t){var r=m[e];if(!r)throw"unknown internal format";var n=r.bytesPerElementMap[t];if(void 0===n)throw"unknown internal format";return n}function y(e){var t=m[e];if(!t)throw"unknown internal format";return{format:t.textureFormat,type:t.type[0]}}function b(e){return 0==(e&e-1)}function E(e,t,r,o){if(!n.isWebGL2(e))return b(t)&&b(r);var i=m[o];if(!i)throw"unknown internal format";return i.colorRenderable&&i.textureFilterable}function g(e){var t=m[e];if(!t)throw"unknown internal format";return t.textureFilterable}function x(e,t,r){return s(t)?o.getGLTypeForTypedArray(t):r||e.UNSIGNED_BYTE}function _(e,t,r,n,o){if(o%1!=0)throw"can't guess dimensions";if(r||n){if(n){if(!r&&(r=o/n)%1)throw"can't guess dimensions"}else if((n=o/r)%1)throw"can't guess dimensions"}else{var i=Math.sqrt(o/(t===e.TEXTURE_CUBE_MAP?6:1));i%1==0?(r=i,n=i):(r=o,n=1)}return{width:r,height:n}}function T(e){u.textureColor=new Uint8Array([255*e[0],255*e[1],255*e[2],255*e[3]])}h[6406]={textureFormat:6406,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1,2,2,4],type:[5121,5131,36193,5126]},h[6409]={textureFormat:6409,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1,2,2,4],type:[5121,5131,36193,5126]},h[6410]={textureFormat:6410,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[2,4,4,8],type:[5121,5131,36193,5126]},h[f]={textureFormat:f,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3,6,6,12,2],type:[5121,5131,36193,5126,33635]},h[6408]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,8,8,16,2,2],type:[5121,5131,36193,5126,32819,32820]},h[33321]={textureFormat:6403,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1],type:[5121]},h[36756]={textureFormat:6403,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[1],type:[5120]},h[33325]={textureFormat:6403,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[4,2],type:[5126,5131]},h[33326]={textureFormat:6403,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[4],type:[5126]},h[33330]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[1],type:[5121]},h[33329]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[1],type:[5120]},h[33332]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5123]},h[33331]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5122]},h[33334]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5125]},h[33333]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5124]},h[33323]={textureFormat:l,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[2],type:[5121]},h[36757]={textureFormat:l,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[2],type:[5120]},h[33327]={textureFormat:l,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[8,4],type:[5126,5131]},h[33328]={textureFormat:l,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[8],type:[5126]},h[33336]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5121]},h[33335]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5120]},h[33338]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5123]},h[33337]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5122]},h[33340]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5125]},h[33339]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5124]},h[32849]={textureFormat:f,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3],type:[5121]},h[35905]={textureFormat:f,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[3],type:[5121]},h[36194]={textureFormat:f,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3,2],type:[5121,33635]},h[36758]={textureFormat:f,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[3],type:[5120]},h[35898]={textureFormat:f,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6,4],type:[5126,5131,35899]},h[35901]={textureFormat:f,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6,4],type:[5126,5131,35902]},h[34843]={textureFormat:f,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6],type:[5126,5131]},h[34837]={textureFormat:f,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5126]},h[36221]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[3],type:[5121]},h[36239]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[3],type:[5120]},h[36215]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[6],type:[5123]},h[36233]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[6],type:[5122]},h[36209]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5125]},h[36227]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5124]},h[32856]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[5121]},h[35907]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[5121]},h[36759]={textureFormat:6408,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[4],type:[5120]},h[32855]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,2,4],type:[5121,32820,33640]},h[32854]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,2],type:[5121,32819]},h[32857]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[33640]},h[34842]={textureFormat:6408,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[16,8],type:[5126,5131]},h[34836]={textureFormat:6408,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[16],type:[5126]},h[36220]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5121]},h[36238]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5120]},h[36975]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[33640]},h[36214]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5123]},h[36232]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5122]},h[36226]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[16],type:[5124]},h[36208]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[16],type:[5125]},h[33189]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2,4],type:[5123,5125]},h[33190]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5125]},h[36012]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5126]},h[35056]={textureFormat:34041,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[34042]},h[36013]={textureFormat:34041,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[36269]},Object.keys(h).forEach(function(e){var t=h[e];t.bytesPerElementMap={},t.bytesPerElement.forEach(function(e,r){var n=t.type[r];t.bytesPerElementMap[n]=e})});var A={};function R(e,t){void 0!==t.colorspaceConversion&&(A.colorspaceConversion=e.getParameter(e.UNPACK_COLORSPACE_CONVERSION_WEBGL),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,t.colorspaceConversion)),void 0!==t.premultiplyAlpha&&(A.premultiplyAlpha=e.getParameter(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha)),void 0!==t.flipY&&(A.flipY=e.getParameter(e.UNPACK_FLIP_Y_WEBGL),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY))}function w(e,t){void 0!==t.colorspaceConversion&&e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,A.colorspaceConversion),void 0!==t.premultiplyAlpha&&e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,A.premultiplyAlpha),void 0!==t.flipY&&e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,A.flipY)}function P(e){A.unpackAlignment=e.getParameter(e.UNPACK_ALIGNMENT),n.isWebGL2(e)&&(A.unpackRowLength=e.getParameter(e.UNPACK_ROW_LENGTH),A.unpackImageHeight=e.getParameter(e.UNPACK_IMAGE_HEIGHT),A.unpackSkipPixels=e.getParameter(e.UNPACK_SKIP_PIXELS),A.unpackSkipRows=e.getParameter(e.UNPACK_SKIP_ROWS),A.unpackSkipImages=e.getParameter(e.UNPACK_SKIP_IMAGES))}function F(e){e.pixelStorei(e.UNPACK_ALIGNMENT,A.unpackAlignment),n.isWebGL2(e)&&(e.pixelStorei(e.UNPACK_ROW_LENGTH,A.unpackRowLength),e.pixelStorei(e.UNPACK_IMAGE_HEIGHT,A.unpackImageHeight),e.pixelStorei(e.UNPACK_SKIP_PIXELS,A.unpackSkipPixels),e.pixelStorei(e.UNPACK_SKIP_ROWS,A.unpackSkipRows),e.pixelStorei(e.UNPACK_SKIP_IMAGES,A.unpackSkipImages))}function O(e,t,r,n){n.minMag&&(r.call(e,t,e.TEXTURE_MIN_FILTER,n.minMag),r.call(e,t,e.TEXTURE_MAG_FILTER,n.minMag)),n.min&&r.call(e,t,e.TEXTURE_MIN_FILTER,n.min),n.mag&&r.call(e,t,e.TEXTURE_MAG_FILTER,n.mag),n.wrap&&(r.call(e,t,e.TEXTURE_WRAP_S,n.wrap),r.call(e,t,e.TEXTURE_WRAP_T,n.wrap),(t===e.TEXTURE_3D||i.isSampler(e,t))&&r.call(e,t,e.TEXTURE_WRAP_R,n.wrap)),n.wrapR&&r.call(e,t,e.TEXTURE_WRAP_R,n.wrapR),n.wrapS&&r.call(e,t,e.TEXTURE_WRAP_S,n.wrapS),n.wrapT&&r.call(e,t,e.TEXTURE_WRAP_T,n.wrapT),n.minLod&&r.call(e,t,e.TEXTURE_MIN_LOD,n.minLod),n.maxLod&&r.call(e,t,e.TEXTURE_MAX_LOD,n.maxLod),n.baseLevel&&r.call(e,t,e.TEXTURE_BASE_LEVEL,n.baseLevel),n.maxLevel&&r.call(e,t,e.TEXTURE_MAX_LEVEL,n.maxLevel)}function L(e,t,r){var n=r.target||e.TEXTURE_2D;e.bindTexture(n,t),O(e,n,e.texParameteri,r)}function C(e,t,r){O(e,t,e.samplerParameteri,r)}function S(e,t){var r=e.createSampler();return C(e,r,t),r}function B(e,t,r,n,o,i,a){r=r||u.textureOptions,i=i||e.RGBA,a=a||e.UNSIGNED_BYTE;var s=r.target||e.TEXTURE_2D;if(n=n||r.width,o=o||r.height,e.bindTexture(s,t),E(e,n,o,i))e.generateMipmap(s);else{var c=g(i)?e.LINEAR:e.NEAREST;e.texParameteri(s,e.TEXTURE_MIN_FILTER,c),e.texParameteri(s,e.TEXTURE_MAG_FILTER,c),e.texParameteri(s,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(s,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)}}function I(e){return!0===e.auto||void 0===e.auto&&void 0===e.level}function U(e,t){return(t=t||{}).cubeFaceOrder||[e.TEXTURE_CUBE_MAP_POSITIVE_X,e.TEXTURE_CUBE_MAP_NEGATIVE_X,e.TEXTURE_CUBE_MAP_POSITIVE_Y,e.TEXTURE_CUBE_MAP_NEGATIVE_Y,e.TEXTURE_CUBE_MAP_POSITIVE_Z,e.TEXTURE_CUBE_MAP_NEGATIVE_Z]}function M(e,t){var r=U(e,t).map(function(e,t){return{face:e,ndx:t}});return r.sort(function(e,t){return e.face-t.face}),r}function j(e,t,r,n){var o=(n=n||u.textureOptions).target||e.TEXTURE_2D,i=n.level||0,a=r.width,s=r.height,f=n.internalFormat||n.format||e.RGBA,l=y(f),p=n.format||l.format,d=n.type||l.type;if(R(e,n),e.bindTexture(o,t),o===e.TEXTURE_CUBE_MAP){var m,h,v=r.width,b=r.height;if(v/6===b)m=b,h=[0,0,1,0,2,0,3,0,4,0,5,0];else if(b/6===v)m=v,h=[0,0,0,1,0,2,0,3,0,4,0,5];else if(v/3==b/2)m=v/3,h=[0,0,1,0,2,0,0,1,1,1,2,1];else{if(v/2!=b/3)throw"can't figure out cube map from element: "+(r.src?r.src:r.nodeName);m=v/2,h=[0,0,1,0,0,1,1,1,0,2,1,2]}c?(c.canvas.width=m,c.canvas.height=m,a=m,s=m,M(e,n).forEach(function(t){var n=h[2*t.ndx+0]*m,o=h[2*t.ndx+1]*m;c.drawImage(r,n,o,m,m,0,0,m,m),e.texImage2D(t.face,i,f,p,d,c.canvas)}),c.canvas.width=1,c.canvas.height=1):"undefined"!=typeof createImageBitmap&&(a=m,s=m,M(e,n).forEach(function(u){var c=h[2*u.ndx+0]*m,l=h[2*u.ndx+1]*m;e.texImage2D(u.face,i,f,m,m,0,p,d,null),createImageBitmap(r,c,l,m,m,{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then(function(r){R(e,n),e.bindTexture(o,t),e.texImage2D(u.face,i,f,p,d,r),w(e,n),I(n)&&B(e,t,n,a,s,f,d)})}))}else if(o===e.TEXTURE_3D||o===e.TEXTURE_2D_ARRAY){var E=Math.min(r.width,r.height),g=Math.max(r.width,r.height),x=g/E;if(x%1!=0)throw"can not compute 3D dimensions of element";var _=r.width===g?1:0,T=r.height===g?1:0;P(e),e.pixelStorei(e.UNPACK_ALIGNMENT,1),e.pixelStorei(e.UNPACK_ROW_LENGTH,r.width),e.pixelStorei(e.UNPACK_IMAGE_HEIGHT,0),e.pixelStorei(e.UNPACK_SKIP_IMAGES,0),e.texImage3D(o,i,f,E,E,E,0,p,d,null);for(var A=0;A<x;++A){var O=A*E*_,C=A*E*T;e.pixelStorei(e.UNPACK_SKIP_PIXELS,O),e.pixelStorei(e.UNPACK_SKIP_ROWS,C),e.texSubImage3D(o,i,0,0,A,E,E,1,p,d,r)}F(e)}else e.texImage2D(o,i,f,p,d,r);w(e,n),I(n)&&B(e,t,n,a,s,f,d),L(e,t,n)}function D(){}function N(e,t){return void 0!==t||function(e){if("undefined"!=typeof document){var t=document.createElement("a");return t.href=e,t.hostname===location.hostname&&t.port===location.port&&t.protocol===location.protocol}var r=new URL(location.href).origin;return new URL(e,location.href).origin===r}(e)?t:"anonymous"}function k(e){return"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof ImageData&&e instanceof ImageData||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement}function z(e,t,r){return k(e)?(setTimeout(function(){r(null,e)}),e):function(e,t,r){var n;if(r=r||D,t=void 0!==t?t:u.crossOrigin,t=N(e,t),"undefined"!=typeof Image){n=new Image,void 0!==t&&(n.crossOrigin=t);var o=function(){n.removeEventListener("error",a),n.removeEventListener("load",s),n=null},a=function(){var t="couldn't load image: "+e;i.error(t),r(t,n),o()},s=function(){r(null,n),o()};return n.addEventListener("error",a),n.addEventListener("load",s),n.src=e,n}if("undefined"!=typeof ImageBitmap){var c,f,l=function(){r(c,f)},p={};t&&(p.mode="cors"),fetch(e,p).then(function(e){if(!e.ok)throw e;return e.blob()}).then(function(e){return createImageBitmap(e,{premultiplyAlpha:"none",colorSpaceConversion:"none"})}).then(function(e){f=e,setTimeout(l)}).catch(function(e){c=e,setTimeout(l)}),n=null}return n}(e,t,r)}function X(e,t,r){var n=(r=r||u.textureOptions).target||e.TEXTURE_2D;if(e.bindTexture(n,t),!1!==r.color){var o=function(e){return e=e||u.textureColor,s(e)?e:new Uint8Array([255*e[0],255*e[1],255*e[2],255*e[3]])}(r.color);if(n===e.TEXTURE_CUBE_MAP)for(var i=0;i<6;++i)e.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,o);else n===e.TEXTURE_3D||n===e.TEXTURE_2D_ARRAY?e.texImage3D(n,0,e.RGBA,1,1,1,0,e.RGBA,e.UNSIGNED_BYTE,o):e.texImage2D(n,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,o)}}function G(e,t,r,n){return n=n||D,r=r||u.textureOptions,X(e,t,r),z((r=Object.assign({},r)).src,r.crossOrigin,function(o,i){o?n(o,t,i):(j(e,t,i,r),n(null,t,i))})}function Y(e,t,r,n){n=n||D;var o=r.src;if(6!==o.length)throw"there must be 6 urls for a cubemap";var i=r.level||0,a=r.internalFormat||r.format||e.RGBA,u=y(a),s=r.format||u.format,c=r.type||e.UNSIGNED_BYTE,f=r.target||e.TEXTURE_2D;if(f!==e.TEXTURE_CUBE_MAP)throw"target must be TEXTURE_CUBE_MAP";X(e,t,r),r=Object.assign({},r);var l,p=6,d=[],m=U(e,r);l=o.map(function(o,u){return z(o,r.crossOrigin,(h=m[u],function(o,u){--p,o?d.push(o):u.width!==u.height?d.push("cubemap face img is not a square: "+u.src):(R(e,r),e.bindTexture(f,t),5===p?U(e).forEach(function(t){e.texImage2D(t,i,a,s,c,u)}):e.texImage2D(h,i,a,s,c,u),w(e,r),I(r)&&e.generateMipmap(f)),0===p&&n(d.length?d:void 0,t,l)}));var h})}function W(e,t,r,n){n=n||D;var o=r.src,i=r.internalFormat||r.format||e.RGBA,a=y(i),u=r.format||a.format,s=r.type||e.UNSIGNED_BYTE,f=r.target||e.TEXTURE_2D_ARRAY;if(f!==e.TEXTURE_3D&&f!==e.TEXTURE_2D_ARRAY)throw"target must be TEXTURE_3D or TEXTURE_2D_ARRAY";X(e,t,r),r=Object.assign({},r);var l,p=o.length,d=[],m=r.level||0,h=r.width,v=r.height,b=o.length,E=!0;l=o.map(function(o,a){return z(o,r.crossOrigin,(y=a,function(o,a){if(--p,o)d.push(o);else{if(R(e,r),e.bindTexture(f,t),E){E=!1,h=r.width||a.width,v=r.height||a.height,e.texImage3D(f,m,i,h,v,b,0,u,s,null);for(var g=0;g<b;++g)e.texSubImage3D(f,m,0,0,g,h,v,1,u,s,a)}else{var x=a;a.width===h&&a.height===v||(x=c.canvas,c.canvas.width=h,c.canvas.height=v,c.drawImage(a,0,0,h,v)),e.texSubImage3D(f,m,0,0,y,h,v,1,u,s,x),x===c.canvas&&(c.canvas.width=0,c.canvas.height=0)}w(e,r),I(r)&&e.generateMipmap(f)}0===p&&n(d.length?d:void 0,t,l)}));var y})}function V(e,t,r,i){var a=(i=i||u.textureOptions).target||e.TEXTURE_2D;e.bindTexture(a,t);var c=i.width,f=i.height,l=i.depth,p=i.level||0,d=i.internalFormat||i.format||e.RGBA,m=y(d),h=i.format||m.format,b=i.type||x(e,r,m.type);if(s(r))r instanceof Uint8ClampedArray&&(r=new Uint8Array(r.buffer));else{var E=o.getTypedArrayTypeForGLType(b);r=new E(r)}var g,T=v(d,b),A=r.byteLength/T;if(A%1)throw"length wrong size for format: "+n.glEnumToString(e,h);if(a===e.TEXTURE_3D)if(c||f||l)!c||f&&l?!f||c&&l?(g=_(e,a,c,f,A/l),c=g.width,f=g.height):(g=_(e,a,c,l,A/f),c=g.width,l=g.height):(g=_(e,a,f,l,A/c),f=g.width,l=g.height);else{var O=Math.cbrt(A);if(O%1!=0)throw"can't guess cube size of array of numElements: "+A;c=O,f=O,l=O}else g=_(e,a,c,f,A),c=g.width,f=g.height;if(P(e),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment||1),R(e,i),a===e.TEXTURE_CUBE_MAP){var L=A/6*(T/r.BYTES_PER_ELEMENT);M(e,i).forEach(function(t){var n=L*t.ndx,o=r.subarray(n,n+L);e.texImage2D(t.face,p,d,c,f,0,h,b,o)})}else a===e.TEXTURE_3D?e.texImage3D(a,p,d,c,f,l,0,h,b,r):e.texImage2D(a,p,d,c,f,0,h,b,r);return w(e,i),F(e),{width:c,height:f,depth:l,type:b}}function H(e,t,r){var n=r.target||e.TEXTURE_2D;e.bindTexture(n,t);var o=r.level||0,i=r.internalFormat||r.format||e.RGBA,a=y(i),u=r.format||a.format,s=r.type||a.type;if(R(e,r),n===e.TEXTURE_CUBE_MAP)for(var c=0;c<6;++c)e.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+c,o,i,r.width,r.height,0,u,s,null);else n===e.TEXTURE_3D?e.texImage3D(n,o,i,r.width,r.height,r.depth,0,u,s,null):e.texImage2D(n,o,i,r.width,r.height,0,u,s,null);w(e,r)}function K(e,t,r){r=r||D,t=t||u.textureOptions;var n=e.createTexture(),o=t.target||e.TEXTURE_2D,i=t.width||1,a=t.height||1,c=t.internalFormat||e.RGBA,f=y(c),l=t.type||f.type;e.bindTexture(o,n),o===e.TEXTURE_CUBE_MAP&&(e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE));var p=t.src;if(p)if("function"==typeof p&&(p=p(e,t)),"string"==typeof p)G(e,n,t,r);else if(s(p)||Array.isArray(p)&&("number"==typeof p[0]||Array.isArray(p[0])||s(p[0]))){var d=V(e,n,p,t);i=d.width,a=d.height,l=d.type}else if(Array.isArray(p)&&("string"==typeof p[0]||k(p[0])))o===e.TEXTURE_CUBE_MAP?Y(e,n,t,r):W(e,n,t,r);else{if(!k(p))throw"unsupported src type";j(e,n,p,t),i=p.width,a=p.height}else H(e,n,t);return I(t)&&B(e,n,t,i,a,c,l),L(e,n,t),n}},"./src/twgl-full.js":
/*!**************************!*\
  !*** ./src/twgl-full.js ***!
  \**************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0;var n={m4:!0,v3:!0,primitives:!0};t.primitives=t.v3=t.m4=void 0;var o=s(r(/*! ./m4.js */"./src/m4.js"));t.m4=o;var i=s(r(/*! ./v3.js */"./src/v3.js"));t.v3=i;var a=s(r(/*! ./primitives.js */"./src/primitives.js"));t.primitives=a;var u=r(/*! ./twgl.js */"./src/twgl.js");function s(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}Object.keys(u).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=u[e]))})},"./src/twgl.js":
/*!*********************!*\
  !*** ./src/twgl.js ***!
  \*********************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0;var n={addExtensionsToContext:!0,getContext:!0,getWebGLContext:!0,resizeCanvasToDisplaySize:!0,setDefaults:!0};t.addExtensionsToContext=b,t.getContext=function(e,t){return function(e,t){for(var r=["webgl2","webgl","experimental-webgl"],n=null,o=0;o<r.length;++o)if(n=e.getContext(r[o],t)){m.addExtensionsToContext&&b(n);break}return n}(e,t)},t.getWebGLContext=function(e,t){return function(e,t){for(var r=["webgl","experimental-webgl"],n=null,o=0;o<r.length;++o)if(n=e.getContext(r[o],t)){m.addExtensionsToContext&&b(n);break}return n}(e,t)},t.resizeCanvasToDisplaySize=function(e,t){t=t||1,t=Math.max(0,t);var r=e.clientWidth*t|0,n=e.clientHeight*t|0;return(e.width!==r||e.height!==n)&&(e.width=r,e.height=n,!0)},t.setDefaults=function(e){a.copyExistingProperties(e,m),o.setAttributeDefaults_(e),i.setTextureDefaults_(e)};var o=d(r(/*! ./attributes.js */"./src/attributes.js"));Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=o[e]))});var i=d(r(/*! ./textures.js */"./src/textures.js"));Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=i[e]))});var a=d(r(/*! ./helper.js */"./src/helper.js")),u=d(r(/*! ./utils.js */"./src/utils.js"));Object.keys(u).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=u[e]))});var s=r(/*! ./draw.js */"./src/draw.js");Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=s[e]))});var c=r(/*! ./framebuffers.js */"./src/framebuffers.js");Object.keys(c).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=c[e]))});var f=r(/*! ./programs.js */"./src/programs.js");Object.keys(f).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=f[e]))});var l=r(/*! ./typedarrays.js */"./src/typedarrays.js");Object.keys(l).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=l[e]))});var p=r(/*! ./vertex-arrays.js */"./src/vertex-arrays.js");function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}Object.keys(p).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||(t[e]=p[e]))});var m={addExtensionsToContext:!0},h=/^(.*?)_/;function v(e,t){u.glEnumToString(e,0);var r=e.getExtension(t);if(r){var n={},o=h.exec(t)[1],i="_"+o;for(var s in r){var c=r[s],f="function"==typeof c,l=f?o:i,p=s;s.endsWith(l)&&(p=s.substring(0,s.length-l.length)),void 0!==e[p]?f||e[p]===c||a.warn(p,e[p],c,s):f?e[p]=function(e){return function(){return e.apply(r,arguments)}}(c):(e[p]=c,n[p]=c)}n.constructor={name:r.constructor.name},u.glEnumToString(n,0)}return r}var y=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_color_buffer_float","EXT_color_buffer_half_float","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_frag_depth","EXT_sRGB","EXT_shader_texture_lod","EXT_texture_filter_anisotropic","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_float_linear","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_depth_texture","WEBGL_draw_buffers"];function b(e){for(var t=0;t<y.length;++t)v(e,y[t])}},"./src/typedarrays.js":
/*!****************************!*\
  !*** ./src/typedarrays.js ***!
  \****************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.getGLTypeForTypedArray=function(e){if(e instanceof Int8Array)return n;if(e instanceof Uint8Array)return o;if(e instanceof Uint8ClampedArray)return o;if(e instanceof Int16Array)return i;if(e instanceof Uint16Array)return a;if(e instanceof Int32Array)return u;if(e instanceof Uint32Array)return s;if(e instanceof Float32Array)return c;throw new Error("unsupported typed array type")},t.getGLTypeForTypedArrayType=function(e){if(e===Int8Array)return n;if(e===Uint8Array)return o;if(e===Uint8ClampedArray)return o;if(e===Int16Array)return i;if(e===Uint16Array)return a;if(e===Int32Array)return u;if(e===Uint32Array)return s;if(e===Float32Array)return c;throw new Error("unsupported typed array type")},t.getTypedArrayTypeForGLType=function(e){var t=f[e];if(!t)throw new Error("unknown gl type");return t},t.isArrayBuffer=void 0;var n=5120,o=5121,i=5122,a=5123,u=5124,s=5125,c=5126,f={},l=f;l[n]=Int8Array,l[o]=Uint8Array,l[i]=Int16Array,l[a]=Uint16Array,l[u]=Int32Array,l[s]=Uint32Array,l[c]=Float32Array,l[32819]=Uint16Array,l[32820]=Uint16Array,l[33635]=Uint16Array,l[5131]=Uint16Array,l[33640]=Uint32Array,l[35899]=Uint32Array,l[35902]=Uint32Array,l[36269]=Uint32Array,l[34042]=Uint32Array;var p="undefined"!=typeof SharedArrayBuffer?function(e){return e&&e.buffer&&(e.buffer instanceof ArrayBuffer||e.buffer instanceof SharedArrayBuffer)}:function(e){return e&&e.buffer&&e.buffer instanceof ArrayBuffer};t.isArrayBuffer=p},"./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.isWebGL1=function(e){return!e.texStorage2D},t.isWebGL2=function(e){return!!e.texStorage2D},t.glEnumToString=void 0;var n,o,i=(n={},o={},function(e,t){return function(e){var t=e.constructor.name;if(!n[t]){for(var r in e)if("number"==typeof e[r]){var i=o[e[r]];o[e[r]]=i?"".concat(i," | ").concat(r):r}n[t]=!0}}(e),o[t]||"0x"+t.toString(16)});t.glEnumToString=i},"./src/v3.js":
/*!*******************!*\
  !*** ./src/v3.js ***!
  \*******************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.add=function(e,t,r){return(r=r||new n(3))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r},t.copy=function(e,t){return(t=t||new n(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t},t.create=function(e,t,r){var o=new n(3);return e&&(o[0]=e),t&&(o[1]=t),r&&(o[2]=r),o},t.cross=function(e,t,r){r=r||new n(3);var o=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return r[0]=e[1]*t[2]-e[2]*t[1],r[1]=o,r[2]=i,r},t.distance=function(e,t){var r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return Math.sqrt(r*r+n*n+o*o)},t.distanceSq=function(e,t){var r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return r*r+n*n+o*o},t.divide=function(e,t,r){return(r=r||new n(3))[0]=e[0]/t[0],r[1]=e[1]/t[1],r[2]=e[2]/t[2],r},t.divScalar=function(e,t,r){return(r=r||new n(3))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r},t.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},t.lerp=function(e,t,r,o){return(o=o||new n(3))[0]=e[0]+r*(t[0]-e[0]),o[1]=e[1]+r*(t[1]-e[1]),o[2]=e[2]+r*(t[2]-e[2]),o},t.lerpV=function(e,t,r,o){return(o=o||new n(3))[0]=e[0]+r[0]*(t[0]-e[0]),o[1]=e[1]+r[1]*(t[1]-e[1]),o[2]=e[2]+r[2]*(t[2]-e[2]),o},t.length=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2])},t.lengthSq=function(e){return e[0]*e[0]+e[1]*e[1]+e[2]*e[2]},t.max=function(e,t,r){return(r=r||new n(3))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r[2]=Math.max(e[2],t[2]),r},t.min=function(e,t,r){return(r=r||new n(3))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r[2]=Math.min(e[2],t[2]),r},t.mulScalar=function(e,t,r){return(r=r||new n(3))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r},t.multiply=function(e,t,r){return(r=r||new n(3))[0]=e[0]*t[0],r[1]=e[1]*t[1],r[2]=e[2]*t[2],r},t.negate=function(e,t){return(t=t||new n(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},t.normalize=function(e,t){t=t||new n(3);var r=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],o=Math.sqrt(r);return o>1e-5?(t[0]=e[0]/o,t[1]=e[1]/o,t[2]=e[2]/o):(t[0]=0,t[1]=0,t[2]=0),t},t.setDefaultType=function(e){var t=n;return n=e,t},t.subtract=function(e,t,r){return(r=r||new n(3))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r};var n=Float32Array},"./src/vertex-arrays.js":
/*!******************************!*\
  !*** ./src/vertex-arrays.js ***!
  \******************************/
/*! no static exports found */function(e,t,r){"use strict";t.__esModule=!0,t.createVertexArrayInfo=function(e,t,r){var o=e.createVertexArray();return e.bindVertexArray(o),t.length||(t=[t]),t.forEach(function(t){n.setBuffersAndAttributes(e,t,r)}),e.bindVertexArray(null),{numElements:r.numElements,elementType:r.elementType,vertexArrayObject:o}},t.createVAOAndSetAttributes=o,t.createVAOFromBufferInfo=function(e,t,r){return o(e,t.attribSetters||t,r.attribs,r.indices)};var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(/*! ./programs.js */"./src/programs.js"));function o(e,t,r,o){var i=e.createVertexArray();return e.bindVertexArray(i),n.setAttributes(t,r),o&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,o),e.bindVertexArray(null),i}}})},e.exports=n()},function(e,t,r){"use strict";var n=r(3),o=r(12),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:s,isStream:function(e){return u(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){e.exports=r(11)},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(1);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var a=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(1),o=r(18),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?u=r(7):"undefined"!=typeof XMLHttpRequest&&(u=r(7)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){s.headers[e]={}}),n.forEach(["post","put","patch"],function(e){s.headers[e]=n.merge(i)}),e.exports=s}).call(this,r(17))},function(e,t,r){"use strict";var n=r(1),o=r(19),i=r(4),a=r(21),u=r(22),s=r(8);e.exports=function(e){return new Promise(function(t,c){var f=e.data,l=e.headers;n.isFormData(f)&&delete l["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",m=e.auth.password||"";l.Authorization="Basic "+btoa(d+":"+m)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,c,n),p=null}},p.onabort=function(){p&&(c(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var h=r(23),v=(e.withCredentials||u(e.url))&&e.xsrfCookieName?h.read(e.xsrfCookieName):void 0;v&&(l[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&n.forEach(l,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete l[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,t,r){"use strict";var n=r(20);e.exports=function(e,t,r,o,i){var a=new Error(e);return n(a,t,r,o,i)}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t){t=t||{};var r={};return n.forEach(["url","method","params","data"],function(e){void 0!==t[e]&&(r[e]=t[e])}),n.forEach(["headers","auth","proxy"],function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])}),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])}),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){"use strict";var n=r(1),o=r(3),i=r(13),a=r(9);function u(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var s=u(r(6));s.Axios=i,s.create=function(e){return u(a(s.defaults,e))},s.Cancel=r(10),s.CancelToken=r(26),s.isCancel=r(5),s.all=function(e){return Promise.all(e)},s.spread=r(27),e.exports=s,e.exports.default=s},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,r){"use strict";var n=r(1),o=r(4),i=r(14),a=r(15),u=r(9);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},s.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}}),n.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}}),e.exports=s},function(e,t,r){"use strict";var n=r(1);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,r){"use strict";var n=r(1),o=r(16),i=r(5),a=r(6),u=r(24),s=r(25);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!u(e.url)&&(e.url=s(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var s,c=[],f=!1,l=-1;function p(){f&&s&&(f=!1,s.length?c=s.concat(c):l=-1,c.length&&d())}function d(){if(!f){var e=u(p);f=!0;for(var t=c.length;t;){for(s=c,c=[];++l<t;)s&&s[l].run();l=-1,t=c.length}s=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new m(e,t)),1!==c.length||f||u(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(8);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,a={};return e?(n.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}}),a):a}},function(e,t,r){"use strict";var n=r(1);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(1);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&u.push("expires="+new Date(r).toGMTString()),n.isString(o)&&u.push("path="+o),n.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(10);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){var n=r(29);"string"==typeof n&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1};r(31)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(30)(!1)).push([e.i,".renderer-canvas {\n  pointer-events: none;\n}",""])},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(a=n,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(s," */")),i=n.sources.map(function(e){return"/*# sourceURL=".concat(n.sourceRoot).concat(e," */")});return[r].concat(i).concat([o]).join("\n")}var a,u,s;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(r,"}"):r}).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(n[i]=!0)}for(var a=0;a<e.length;a++){var u=e[a];null!=u[0]&&n[u[0]]||(r&&!u[2]?u[2]=r:r&&(u[2]="(".concat(u[2],") and (").concat(r,")")),t.push(u))}},t}},function(e,t,r){"use strict";var n,o={},i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}();function u(e,t){for(var r=[],n={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};n[a]?n[a].parts.push(u):r.push(n[a]={id:a,parts:[u]})}return r}function s(e,t){for(var r=0;r<e.length;r++){var n=e[r],i=o[n.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](n.parts[a]);for(;a<n.parts.length;a++)i.parts.push(h(n.parts[a],t))}else{for(var u=[];a<n.parts.length;a++)u.push(h(n.parts[a],t));o[n.id]={id:n.id,refs:1,parts:u}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var n=r.nc;n&&(e.attributes.nonce=n)}if(Object.keys(e.attributes).forEach(function(r){t.setAttribute(r,e.attributes[r])}),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var f,l=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function p(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}var d=null,m=0;function h(e,t){var r,n,o;if(t.singleton){var i=m++;r=d||(d=c(t)),n=p.bind(null,r,i,!1),o=p.bind(null,r,i,!0)}else r=c(t),n=function(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var r=u(e,t);return s(r,t),function(e){for(var n=[],i=0;i<r.length;i++){var a=r[i],c=o[a.id];c&&(c.refs--,n.push(c))}e&&s(u(e,t),t);for(var f=0;f<n.length;f++){var l=n[f];if(0===l.refs){for(var p=0;p<l.parts.length;p++)l.parts[p]();delete o[l.id]}}}}},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r(2),i=r.n(o),a="attribute vec4 a_position;\n \nuniform mat4 u_matrix;\n\nvoid main() {\n  // Multiply the position by the matrix.\n  // gl_Position =  u_matrix * a_position;\n  gl_Position =  u_matrix * a_position;\n}",u="#extension GL_OES_standard_derivatives : enable\n  \nprecision highp float;\n// uniform sampler2D texture;\nvarying vec2 coord;\n\nuniform float u_dTime;\n\n\nvoid main() {\n  \n  gl_FragColor = vec4(1. , 1., 1., abs(cos(u_dTime/400.)* 1.2));\n}",s="attribute vec4 a_position;\nattribute vec2 a_texcoord;\n\nvarying vec2 v_texCoord;\nvarying vec4 v_position;\n\nuniform mat4 u_matrix;\nuniform vec3 u_rand;\n\nvoid main() {\n  // Multiply the position by the matrix.\n  // gl_Position =  u_matrix * a_position;\n  gl_Position =  u_matrix * a_position;\n  v_texCoord = a_texcoord;\n  v_position = a_position;\n}",c="#extension GL_OES_standard_derivatives : enable\n           \nprecision highp float;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform float u_time;\nuniform vec2 u_mouse;\n\nvarying vec2 v_texCoord;\nvarying vec4 v_position;\n\n#define M_PI 3.14159265358979323846\n\n\nfloat rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\nfloat rand (vec2 co, float l) {return rand(vec2(rand(co), l));}\nfloat rand (vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}\n\nfloat perlin(vec2 p, float dim, float time) {\n\tvec2 pos = floor(p * dim);\n\tvec2 posx = pos + vec2(1.0, 0.0);\n\tvec2 posy = pos + vec2(0.0, 1.0);\n\tvec2 posxy = pos + vec2(1.0);\n\t\n\tfloat c = rand(pos, dim, time);\n\tfloat cx = rand(posx, dim, time);\n\tfloat cy = rand(posy, dim, time);\n\tfloat cxy = rand(posxy, dim, time);\n\t\n\tvec2 d = fract(p * dim);\n\td = -0.5 * cos(d * M_PI) + 0.5;\n\t\n\tfloat ccx = mix(c, cx, d.x);\n\tfloat cycxy = mix(cy, cxy, d.x);\n\tfloat center = mix(ccx, cycxy, d.y);\n\t\n\treturn center * 2.0 - 1.0;\n}\n\n// float rand(float n){return fract(sin(n) * 43758.5453123);}\n\n// float noise(float p){\n// \tfloat fl = floor(p);\n//   float fc = fract(p);\n// \treturn (mix(rand(fl), rand(fl + 1.0), fc))-0.5;\n// }\n\t\n// // float noise(vec2 n) {\n// // \tconst vec2 d = vec2(0.0, 1.0);\n// //   vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n// // \treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n// // }\n\n\nvoid main() {\n\n  vec2 step = vec2(0.00015, 0.0003);\n\n  vec2 st =  v_texCoord + vec2(0.001);\n\n  // vec2 normal = normalize( vec2(\n  //   texture2D(u_texture, v_texCoord + vec2(step.x, 0.)).x - texture2D(u_texture, v_texCoord + vec2(-step.x, 0.)).x,\n  //   texture2D(u_texture, v_texCoord + vec2(0., step.y)).x - texture2D(u_texture, v_texCoord + vec2(0., -step.y)).x\n  // ));\n  \n  vec2 light1 = normalize( vec2(1., 0.5) );\n\n  vec2 light2 = normalize( vec2(-1., 0.));\n  \n  vec2 noise = vec2(\n    (pow(distance(v_position.xy, u_mouse)* 0.0001, 0.9) * perlin(v_position.xy*0.3, 1., u_time*0.000001)*0.4), \n    (pow(distance(v_position.xy, u_mouse)* 0.0001, 0.9) * perlin(-v_position.xy*0.3, 1., u_time*0.000001)*0.4));\n  \n  vec4 color = texture2D(u_texture, v_texCoord + noise);\n  // color *= sin(u_time);\n\n  // vec3 diffuse = ceil(color.r) * vec3(1., 0.3, 0.8);\n  \n  // color = vec4(diffuse * (0.5+dot(light1, normal)), 1.);\n  \n  \n  gl_FragColor = vec4(color);\n}";r(28);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach(function(t){d(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function d(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"start",function(){return A}),r.d(t,"setContainer",function(){return R}),r.d(t,"feedData",function(){return w}),r.d(t,"render",function(){return P}),r.d(t,"setButtons",function(){return F});var m,h,v={textboxList:[],fontList:[],mouseX:null,mouseY:null,mousePressed:!1,shiftPressed:!1,pixelRatio:1.5};function y(e){/^textbox-\d+$/.test(e.target.id)?v.textboxList.forEach(function(t){t.isEditable&&function(e,t,r){var n=document.getElementById(e.id).getBoundingClientRect(),o=t/n.width*100,i=r/n.width*100,a={iLine:0,iChar:0};e.lineList.some(function(t,r){var n=0;t.charList.some(function(e,r){var o=e.position.sublineY+e.position.sublineHeight;return i<o?(n=e.position.sublineIndex,!0):!t.charList[r+1]&&(n=e.position.sublineIndex,!0)});var u=t.charList[t.charList.length-1].position.sublineY+t.charList[t.charList.length-1].position.sublineHeight;return i<u?(Object.assign(a,{iLine:r}),t.charList.some(function(e,r){if(n>e.position.sublineIndex)return!1;var i=e.position.charX+e.position.charWidth*(1+e.style.tracking)/2;if(o<i)return Object.assign(a,{iChar:r}),!0;var u=t.charList[r+1];return u?!!(u&&u.position.sublineIndex>n)&&(Object.assign(a,{iChar:r+1}),!0):(Object.assign(a,{iChar:r+1}),!0)}),!0):(e.lineList[r+1]||(Object.assign(a,{iLine:r}),t.charList.some(function(e,r){if(n>e.position.sublineIndex)return!1;var i=e.position.charX+e.position.charWidth*(1+e.style.tracking)/2;return o<i?(Object.assign(a,{iChar:r}),!0):t.charList[r+1]?void 0:(Object.assign(a,{iChar:r+1}),!0)})),!1)});var u=new Date;Object.assign(a,{clickTime:u.getTime()}),Object.assign(e,{cursor:a})}(t,e.offsetX,e.offsetY)}):v.textboxList.forEach(function(e){e.isEditable&&(e.cursor=null)})}function b(e){v.textboxList.forEach(function(t){if(t.cursor){var r,n=t.cursor;if("Enter"===e.key){var o=t.lineList[n.iLine],i=p({},o),a=o.charList[n.iChar-1],u=o.charList[n.iChar],s=o.charList.splice(n.iChar);if(s.length>0)i.charList=s;else{var c={letter:null,style:p({},a.style)};i.charList=[c]}if(0===n.iChar){var f={letter:null,style:p({},u.style)};o.charList.push(f)}t.lineList.splice(n.iLine+1,0,i),n.iLine++,n.iChar=0}else if("Backspace"===e.key){var l=t.lineList[n.iLine-1],d=t.lineList[n.iLine],m=t.lineList[n.iLine].charList[n.iChar-1];if(m&&null!==m.letter){n.iChar--;var y=d.charList.splice(n.iChar,1)[0];if(0===d.charList.length){var b={letter:null,style:p({},y.style)};d.charList.push(b)}}else{if(!l)return;null===d.charList[0].letter?d.charList.splice(0,1):null===l.charList[0].letter&&l.charList.splice(0,1);var E=l.charList.concat(d.charList);t.lineList.splice(n.iLine,1),n.iLine--,n.iChar=t.lineList[n.iLine].charList.length,t.lineList[n.iLine].charList=E}}else if(r=e.key,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.,!?".includes(r)){var g,x=t.lineList[n.iLine].charList[n.iChar-1],A=t.lineList[n.iLine].charList[n.iChar];g=x?Object.assign({},x.style):Object.assign({},A.style),(x&&null===x.letter||A&&null===A.letter)&&(t.lineList[n.iLine].charList.splice(0,1),n.iChar=0),t.lineList[n.iLine].charList.splice(n.iChar,0,{letter:e.key,style:g}),n.iChar++}_(t,v.fontList),T(h,t,v.fontList)}})}function E(e,t){!function(e){m.style.width=e+"px"}(e),function(e){m.style.height=e+"px"}(t)}function g(e,t){return e.find(function(e){return e.name===t.style.font}).glyphs[t.letter]}function x(e,t,r,o,i,a){t=t||1,r=r||1;for(var u=((o=o||1)+1)*((i=i||1)+1),s=n.primitives.createAugmentedTypedArray(3,u),c=n.primitives.createAugmentedTypedArray(3,u),f=n.primitives.createAugmentedTypedArray(2,u),l=g(v.fontList,e),p=0;p<=i;p++)for(var d=0;d<=o;d++){var m=d/o,h=p/i;s.push(t*m-.5*t,r*h-.5*r,0),c.push(0,0,1),f.push((l.textureCoords.x+l.textureCoords.originX+m*l.textureCoords.advance)/4096,(l.textureCoords.y+h*l.textureCoords.height)/2048)}for(var y=o+1,b=n.primitives.createAugmentedTypedArray(3,o*i*2,Uint16Array),E=0;E<i;E++)for(var x=0;x<o;x++)b.push((E+0)*y+x,(E+1)*y+x,(E+0)*y+x+1),b.push((E+1)*y+x,(E+1)*y+x+1,(E+0)*y+x+1);return n.primitives.reorientVertices({position:s,normal:c,texcoord:f,indices:b},a)}function _(e,t){var r=(new Date).getTime(),n=document.getElementById(e.id).getBoundingClientRect(),o=n.width,i=n.height,a=100-2*e.paddingX,u=i/o*100-2*e.paddingY,s=0;e.lineList.forEach(function(e,r,n){var o=0,i=0,u=0,c=0;e.charList.forEach(function(r,n){r.position={sublineIndex:i,sublineY:s,charWidth:r.letter?r.style.size/g(t,r).ratio:0,charHeight:r.style.size,charX:o,charY:s},o+=r.position.charWidth+r.position.charWidth*r.style.tracking,u<r.position.charHeight&&(u=r.position.charHeight),c<r.position.charHeight*r.style.leading&&(c=r.position.charHeight*r.style.leading);var f=e.charList[n+1];if(e.wrapLine&&f){var l=f.style.size/g(t,f).ratio;if(o+l>a)e.charList.filter(function(e){return e.position&&e.position.sublineIndex===i}).forEach(function(e){e.position.sublineHeight=u}),s+=c,o=c=0,u=0,i++}}),e.charList.filter(function(e){return e.position&&e.position.sublineIndex===i}).forEach(function(e){e.position.sublineHeight=u});var f=e.charList[e.charList.length-1],l=f.position.charX+f.position.charWidth;l>a?(e.charList.forEach(function(e,t,r){e.position.charX*=a/l,e.position.charWidth*=a/l,e.position.charHeight*=a/l,e.position.sublineHeight*=a/l}),c*=a/l):e.charList.forEach(function(t,r){var n=e.charList[r+1];if(n&&t.position.sublineIndex!==n.position.sublineIndex||!n){var o=t.position.sublineIndex,i=t.position.charX+t.position.charWidth,u=a-i,s=e.charList.filter(function(e){return e.position.sublineIndex===o});switch(e.horizontalAlign){case"LEFT":break;case"CENTER":s.forEach(function(e){e.position.charX+=u/2});break;case"RIGHT":s.forEach(function(e){e.position.charX+=u});break;case"SPREAD":var c=s.length-1?u/(s.length-1):0;s.forEach(function(e,t){e.position.charX+=c*t})}}}),s+=c,i=0});var c=e.lineList[e.lineList.length-1],f=c.charList[c.charList.length-1],l=f.position.sublineY+f.position.sublineHeight;if(u>l){var p=u-l;e.lineList.forEach(function(t,r){switch(e.verticalAlign){case"TOP":break;case"CENTER":t.charList.forEach(function(e){e.position.charY+=p/2,e.position.sublineY+=p/2});break;case"BOTTOM":t.charList.forEach(function(e){e.position.charY+=p,e.position.sublineY+=p});break;case"SPREAD":var n=e.lineList.length-1?p/(e.lineList.length-1):0;t.charList.forEach(function(e){e.position.charY+=n*r,e.position.sublineY+=n*r})}})}else{var d=(l+2*e.paddingY)/100*o;document.getElementById(e.id).style.height=d+"px"}e.lineList.forEach(function(t,r,n){t.charList.forEach(function(t,r,n){t.position.charX+=e.paddingX,t.position.charY+=e.paddingY,t.position.sublineY+=e.paddingY})});var m=new Date;console.log(m.getTime()-r)}function T(e,t,r){var o=(new Date).getTime(),i=document.getElementById(t.id).getBoundingClientRect(),a=i.width,u=i.height;t.lineList.forEach(function(t,o,i){t.charList.forEach(function(t){var o=t.position.charWidth/100*a,i=t.position.charHeight/100*a,s=t.position.charX/100*a,c=t.position.charY/100*a;g(r,t);t.renderInfo={bufferInfo:n.createBufferInfoFromArrays(e,x(t,o,i,1,1,n.m4.translation(n.v3.create(s+o/2,c+i/2,0)))),uniforms:{u_matrix:n.m4.ortho(0,a,u,0,400,-400),u_rand:n.v3.create(Math.random(),Math.random(),Math.random()),u_resolution:[t.position.charWidth,t.position.charHeight],u_time:0,u_mouse:[0,0]}}})});var s=new Date;console.log(s.getTime()-o)}function A(e){R(window),F(),w(e.data).then(P)}function R(e){!function(e){if(e===window)E(window.innerWidth,window.innerHeight),m.style.position="fixed",document.body.appendChild(m);else{var t=e.getBoundingClientRect();E(t.width,t.height),m.style.position="absolute",e.appendChild(m)}m.style.top="0px",m.style.left="0px"}(e)}function w(e){var t=[],r="test-font/";t.push(r+"test-font-texture.png"),t.push(r+"test-font-texture.json");var o=t.map(function(e){return i.a.get(e)});return v.fontList.forEach(function(e){Object.keys(e.glyphs).forEach(function(t){var r=e.glyphs[t];r.programInfo||(r.programInfo=n.createProgramInfo(h,[r.vert,r.frag]))})}),n.createTexture(h,{src:"test-font/test-font-texture.png"}),i.a.all(o).then(function(t){console.log(t),t.forEach(function(e){if("object"===f(e.data)){var t={},r=0;Object.keys(e.data.characters).forEach(function(t){var n=e.data.characters[t].originY;r<n&&(r=n)}),Object.keys(e.data.characters).forEach(function(o){var i=e.data.characters[o],a={ratio:i.height/i.advance,baseline:r/e.data.size,vert:s,frag:c,programInfo:n.createProgramInfo(h,[s,c]),textureCoords:i};t[o]=a}),console.log(t);var o={name:"test-font",glyphs:t};v.fontList.push(o)}}),v.textboxList=e.textboxList,v.textboxList.forEach(function(e){_(e,v.fontList),T(h,e,v.fontList),document.getElementById(e.id).addEventListener("mousemove",function(t){!function(e,t){t.uniforms.u_mouse=[e.offsetX,e.offsetY]}(t,e)})})})}function P(e){n.resizeCanvasToDisplaySize(h.canvas,v.pixelRatio),h.enable(h.DEPTH_TEST),h.disable(h.SCISSOR_TEST),h.clearColor(0,0,0,0),h.clear(h.COLOR_BUFFER_BIT|h.DEPTH_BUFFER_BIT),v.textboxList.forEach(function(t){if(function(e,t,r){var n=document.getElementById(t.id);if(!n)return!1;var o=function(e,t){var r=e.getBoundingClientRect(),n=t.getBoundingClientRect();return{left:r.left-n.left,right:r.right-n.left,top:r.top-n.top,bottom:r.bottom-n.top}}(n,e.canvas);if(o.bottom<0||o.top>e.canvas.clientHeight||o.right<0||o.left>e.canvas.clientWidth)return!1;var i=(o.right-o.left)*r,a=(o.bottom-o.top)*r,u=o.left*r,s=(e.canvas.clientHeight-o.bottom)*r;return e.enable(e.SCISSOR_TEST),e.viewport(u,s,i,a),e.scissor(u,s,i,a),!0}(h,t,v.pixelRatio)&&(h.clearColor(0,0,0,1),h.clear(h.COLOR_BUFFER_BIT),t.lineList.forEach(function(r){r.charList.forEach(function(r){if(r.letter){var o=g(v.fontList,r).programInfo;h.useProgram(o.program),n.setBuffersAndAttributes(h,o,r.renderInfo.bufferInfo),r.renderInfo.uniforms.u_time=.001*e,r.renderInfo.uniforms.u_mouse=t.uniforms.u_mouse,console.log(r.renderInfo.uniforms.u_mouse),n.setUniforms(o,r.renderInfo.uniforms),n.drawBufferInfo(h,r.renderInfo.bufferInfo)}})}),t.cursor)){var r,o=document.getElementById(t.id).getBoundingClientRect(),i=o.width,s=o.height,c=t.lineList[t.cursor.iLine],f=c.charList[0],l=c.charList[t.cursor.iChar-1];if(l){var p=l.position.charHeight/100*i,d=(l.position.charX+l.position.charWidth*(1+l.style.tracking))/100*i,m=l.position.charY/100*i;r=n.primitives.createPlaneBufferInfo(h,3,1.1*p,1,1,n.m4.multiply(n.m4.translation(n.v3.create(d,m+p/2,-.001)),n.m4.rotationX(Math.PI/2)))}else{var y=f.position.charHeight/100*i,b=f.position.charX/100*i,E=f.position.charY/100*i;r=n.primitives.createPlaneBufferInfo(h,3,1.1*y,1,1,n.m4.multiply(n.m4.translation(n.v3.create(b,E+y/2,-.001)),n.m4.rotationX(Math.PI/2)))}var x=n.createProgramInfo(h,[a,u]),_=new Date,T={u_matrix:n.m4.ortho(0,i,s,0,400,-400),u_dTime:_.getTime()-t.cursor.clickTime};h.useProgram(x.program),n.setBuffersAndAttributes(h,x,r),n.setUniforms(x,T),n.drawBufferInfo(h,r)}}),requestAnimationFrame(P)}function F(){var e=["vertical-top","vertical-center","vertical-bottom","vertical-spread","horizontal-left","horizontal-center","horizontal-right","horizontal-spread","wrapLine"];v.textboxList.forEach(function(t){e.forEach(function(e){var r=document.getElementById("".concat(t.id,"-").concat(e));if(r)if(e.includes("vertical")){var n=e.split("-")[1].toUpperCase();r.addEventListener("mousedown",function(e,t,r,n){return function(){r.verticalAlign=n,_(r,t),T(e,r,t)}}(h,v.fontList,t,n))}else if(e.includes("horizontal")){var o=e.split("-")[1].toUpperCase();r.addEventListener("mousedown",function(e,t,r,n){return function(){r.cursor&&(r.lineList[r.cursor.iLine].horizontalAlign=n,_(r,t),T(e,r,t))}}(h,v.fontList,t,o))}else e.includes("wrapLine")&&r.addEventListener("mousedown",function(e,t,r){return function(){r.cursor&&(r.lineList[r.cursor.iLine].wrapLine=!r.lineList[r.cursor.iLine].wrapLine,_(r,t),T(e,r,t))}}(h,v.fontList,t))})})}(m=document.createElement("canvas")).classList.add("renderer-canvas"),(h=function(e){var t,r={antialias:!0,alpha:!0,depth:!0,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1};try{t=e.getContext("experimental-webgl",r)}catch(e){}try{t=t||e.getContext("webgl",r)}catch(e){}return t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.enable(t.BLEND),t}(m))?(n.setDefaults({attribPrefix:"a_"}),h.getExtension("OES_standard_derivatives"),n.resizeCanvasToDisplaySize(m,v.pixelRatio),window.addEventListener("mousedown",y),window.addEventListener("keydown",b)):document.write("No WebGL support. Please use a modern browser.")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,