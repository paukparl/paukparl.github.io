{
  "name": "My First Font",
  "id": "_ACGDE",
  "sample": {
    "text": "HI",
    "index": 3,
    "cols": 12,
    "rows": 8,
    "background": "#000"
  },
  "glyphs": {
    "A": {
      "letter": "A",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "B": {
      "letter": "B",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "C": {
      "letter": "C",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "D": {
      "letter": "D",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "E": {
      "letter": "E",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "F": {
      "letter": "F",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "G": {
      "letter": "G",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "H": {
      "letter": "H",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "I": {
      "letter": "I",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "J": {
      "letter": "J",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "K": {
      "letter": "K",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "L": {
      "letter": "L",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "M": {
      "letter": "M",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "N": {
      "letter": "N",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "O": {
      "letter": "O",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "P": {
      "letter": "P",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "Q": {
      "letter": "Q",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "R": {
      "letter": "R",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "S": {
      "letter": "S",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "T": {
      "letter": "T",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "U": {
      "letter": "U",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "V": {
      "letter": "V",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "W": {
      "letter": "W",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "X": {
      "letter": "X",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "Y": {
      "letter": "Y",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    },
    "Z": {
      "letter": "Z",
      "texture": "Cera_Round_Bold",
      "width": "1",
      "textureSize": "1",
      "alignToTexture": true,
      "u_0": "MOUSE_X",
      "u_1": "MOUSE_Y",
      "u_2": "MOUSE_Y",
      "vert": "attribute vec4 a_position;\nattribute vec2 a_texcoord;\nattribute vec2 a_planecoord;\n\nuniform mat4 u_matrix;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\nvoid main() {\n  gl_Position =  u_matrix * a_position;\n  v_texcoord = a_texcoord;\n  v_planecoord = a_planecoord;\n}",
      "frag": "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nuniform sampler2D u_fontTexture;\nuniform vec4 u_crop;\nuniform float u_0;\nuniform float u_1;\nuniform float u_2;\nuniform float u_time;\nuniform vec2 u_position;\n\nvarying vec2 v_texcoord;\nvarying vec2 v_planecoord;\n\n\nconst float TWO_PI = 6.28318530718;\nconst float vertices = 10.;\nconst float startIndex = vertices;\nconst float endIndex = vertices * 2.;\n\nfloat circle(vec2 uv, vec2 pos, float r){\n \t\n    return r/distance(uv, pos);\n}\n\n\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\n\nfloat charMask() {\n  // MSDF -> SDF\n  vec3 sample = texture2D(u_fontTexture, v_texcoord).rgb;\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n  sigDist = clamp(sigDist+0.5, 0., 1.0);\n  // Crop\n  if (u_crop.x > v_texcoord.x\n  ||  u_crop.y < v_texcoord.x\n  ||  u_crop.z > v_texcoord.y \n  ||  u_crop.w < v_texcoord.y) {\n    sigDist = 0.;\n  }\n  \n  return sigDist;\n}\n\nvoid main() {\n  \n  float dist = length(u_position-vec2(u_0, 1.-u_1));\n  float time = u_time * 5. + u_position.x*100.;\n  vec2 uv = v_planecoord;\n  uv -= .5;\n    \n    \n    float strength = pow((charMask()),0.6)* 0.6 + 0.1;\n    \n    float r = 0.08 * (1.5-dist*1.5);\n\n    float c = circle(uv, vec2(sin(time) * .4,  cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .5) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .6) * .4, cos(time * .4) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .2) * .4, cos(time * .3) * .4), strength * r);\n    c += circle(uv, vec2(sin(time * .3) * .4, cos(time * .6) * .4), strength * r);\n    c *= c*c*c*c;\n    c = step(0.5, c);\n  gl_FragColor = vec4(vec3(1.),c);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "focused": true,
      "error": false,
      "failed": false
    }
  }
}